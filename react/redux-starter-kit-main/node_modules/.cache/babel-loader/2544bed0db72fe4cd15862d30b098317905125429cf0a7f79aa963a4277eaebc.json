{"ast":null,"code":"\"use strict\";\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function () {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n};\nvar __values = this && this.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n    m = s && o[s],\n    i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar normalizeHeaderName_1 = require(\"./utils/normalizeHeaderName\");\nvar normalizeHeaderValue_1 = require(\"./utils/normalizeHeaderValue\");\nvar HeadersPolyfill = /** @class */function () {\n  function HeadersPolyfill(init) {\n    var _this = this;\n    // Normalized header {\"name\":\"a, b\"} storage.\n    this._headers = {};\n    // Keeps the mapping between the raw header name\n    // and the normalized header name to ease the lookup.\n    this._names = new Map();\n    /**\n     * @note Cannot check if the `init` is an instance of the `Headers`\n     * because that class is only defined in the browser.\n     */\n    if (['Headers', 'HeadersPolyfill'].includes(init === null || init === void 0 ? void 0 : init.constructor.name) || init instanceof HeadersPolyfill) {\n      var initialHeaders = init;\n      initialHeaders.forEach(function (value, name) {\n        _this.append(name, value);\n      }, this);\n    } else if (Array.isArray(init)) {\n      init.forEach(function (_a) {\n        var _b = __read(_a, 2),\n          name = _b[0],\n          value = _b[1];\n        _this.append(name, Array.isArray(value) ? value.join(', ') : value);\n      });\n    } else if (init) {\n      Object.getOwnPropertyNames(init).forEach(function (name) {\n        var value = init[name];\n        _this.append(name, Array.isArray(value) ? value.join(', ') : value);\n      });\n    }\n  }\n  HeadersPolyfill.prototype[Symbol.iterator] = function () {\n    return this.entries();\n  };\n  HeadersPolyfill.prototype.keys = function () {\n    var _a, _b, name_1, e_1_1;\n    var e_1, _c;\n    return __generator(this, function (_d) {\n      switch (_d.label) {\n        case 0:\n          _d.trys.push([0, 5, 6, 7]);\n          _a = __values(Object.keys(this._headers)), _b = _a.next();\n          _d.label = 1;\n        case 1:\n          if (!!_b.done) return [3 /*break*/, 4];\n          name_1 = _b.value;\n          return [4 /*yield*/, name_1];\n        case 2:\n          _d.sent();\n          _d.label = 3;\n        case 3:\n          _b = _a.next();\n          return [3 /*break*/, 1];\n        case 4:\n          return [3 /*break*/, 7];\n        case 5:\n          e_1_1 = _d.sent();\n          e_1 = {\n            error: e_1_1\n          };\n          return [3 /*break*/, 7];\n        case 6:\n          try {\n            if (_b && !_b.done && (_c = _a.return)) _c.call(_a);\n          } finally {\n            if (e_1) throw e_1.error;\n          }\n          return [7 /*endfinally*/];\n        case 7:\n          return [2 /*return*/];\n      }\n    });\n  };\n\n  HeadersPolyfill.prototype.values = function () {\n    var _a, _b, value, e_2_1;\n    var e_2, _c;\n    return __generator(this, function (_d) {\n      switch (_d.label) {\n        case 0:\n          _d.trys.push([0, 5, 6, 7]);\n          _a = __values(Object.values(this._headers)), _b = _a.next();\n          _d.label = 1;\n        case 1:\n          if (!!_b.done) return [3 /*break*/, 4];\n          value = _b.value;\n          return [4 /*yield*/, value];\n        case 2:\n          _d.sent();\n          _d.label = 3;\n        case 3:\n          _b = _a.next();\n          return [3 /*break*/, 1];\n        case 4:\n          return [3 /*break*/, 7];\n        case 5:\n          e_2_1 = _d.sent();\n          e_2 = {\n            error: e_2_1\n          };\n          return [3 /*break*/, 7];\n        case 6:\n          try {\n            if (_b && !_b.done && (_c = _a.return)) _c.call(_a);\n          } finally {\n            if (e_2) throw e_2.error;\n          }\n          return [7 /*endfinally*/];\n        case 7:\n          return [2 /*return*/];\n      }\n    });\n  };\n\n  HeadersPolyfill.prototype.entries = function () {\n    var _a, _b, name_2, e_3_1;\n    var e_3, _c;\n    return __generator(this, function (_d) {\n      switch (_d.label) {\n        case 0:\n          _d.trys.push([0, 5, 6, 7]);\n          _a = __values(Object.keys(this._headers)), _b = _a.next();\n          _d.label = 1;\n        case 1:\n          if (!!_b.done) return [3 /*break*/, 4];\n          name_2 = _b.value;\n          return [4 /*yield*/, [name_2, this.get(name_2)]];\n        case 2:\n          _d.sent();\n          _d.label = 3;\n        case 3:\n          _b = _a.next();\n          return [3 /*break*/, 1];\n        case 4:\n          return [3 /*break*/, 7];\n        case 5:\n          e_3_1 = _d.sent();\n          e_3 = {\n            error: e_3_1\n          };\n          return [3 /*break*/, 7];\n        case 6:\n          try {\n            if (_b && !_b.done && (_c = _a.return)) _c.call(_a);\n          } finally {\n            if (e_3) throw e_3.error;\n          }\n          return [7 /*endfinally*/];\n        case 7:\n          return [2 /*return*/];\n      }\n    });\n  };\n  /**\n   * Returns a `ByteString` sequence of all the values of a header with a given name.\n   */\n  HeadersPolyfill.prototype.get = function (name) {\n    return this._headers[normalizeHeaderName_1.normalizeHeaderName(name)] || null;\n  };\n  /**\n   * Sets a new value for an existing header inside a `Headers` object, or adds the header if it does not already exist.\n   */\n  HeadersPolyfill.prototype.set = function (name, value) {\n    var normalizedName = normalizeHeaderName_1.normalizeHeaderName(name);\n    this._headers[normalizedName] = normalizeHeaderValue_1.normalizeHeaderValue(value);\n    this._names.set(normalizedName, name);\n  };\n  /**\n   * Appends a new value onto an existing header inside a `Headers` object, or adds the header if it does not already exist.\n   */\n  HeadersPolyfill.prototype.append = function (name, value) {\n    var resolvedValue = this.has(name) ? this.get(name) + \", \" + value : value;\n    this.set(name, resolvedValue);\n  };\n  /**\n   * Deletes a header from the `Headers` object.\n   */\n  HeadersPolyfill.prototype.delete = function (name) {\n    if (!this.has(name)) {\n      return this;\n    }\n    var normalizedName = normalizeHeaderName_1.normalizeHeaderName(name);\n    delete this._headers[normalizedName];\n    this._names.delete(normalizedName);\n    return this;\n  };\n  /**\n   * Returns the object of all the normalized headers.\n   */\n  HeadersPolyfill.prototype.all = function () {\n    return this._headers;\n  };\n  /**\n   * Returns the object of all the raw headers.\n   */\n  HeadersPolyfill.prototype.raw = function () {\n    var _this = this;\n    return Object.entries(this._headers).reduce(function (headers, _a) {\n      var _b = __read(_a, 2),\n        name = _b[0],\n        value = _b[1];\n      headers[_this._names.get(name)] = value;\n      return headers;\n    }, {});\n  };\n  /**\n   * Returns a boolean stating whether a `Headers` object contains a certain header.\n   */\n  HeadersPolyfill.prototype.has = function (name) {\n    return this._headers.hasOwnProperty(normalizeHeaderName_1.normalizeHeaderName(name));\n  };\n  /**\n   * Traverses the `Headers` object,\n   * calling the given callback for each header.\n   */\n  HeadersPolyfill.prototype.forEach = function (callback, thisArg) {\n    for (var name_3 in this._headers) {\n      if (this._headers.hasOwnProperty(name_3)) {\n        callback.call(thisArg, this._headers[name_3], name_3, this);\n      }\n    }\n  };\n  return HeadersPolyfill;\n}();\nexports.default = HeadersPolyfill;","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}