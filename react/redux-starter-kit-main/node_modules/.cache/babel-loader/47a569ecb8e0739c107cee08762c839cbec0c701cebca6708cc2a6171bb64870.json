{"ast":null,"code":"\"use strict\";\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n};\nexports.__esModule = true;\nexports.factory = void 0;\nvar outvariant_1 = require(\"outvariant\");\nvar glossary_1 = require(\"./glossary\");\nvar first_1 = require(\"./utils/first\");\nvar executeQuery_1 = require(\"./query/executeQuery\");\nvar parseModelDefinition_1 = require(\"./model/parseModelDefinition\");\nvar createModel_1 = require(\"./model/createModel\");\nvar updateEntity_1 = require(\"./model/updateEntity\");\nvar OperationError_1 = require(\"./errors/OperationError\");\nvar Database_1 = require(\"./db/Database\");\nvar generateRestHandlers_1 = require(\"./model/generateRestHandlers\");\nvar generateGraphQLHandlers_1 = require(\"./model/generateGraphQLHandlers\");\nvar sync_1 = require(\"./extensions/sync\");\n/**\n * Create a database with the given models.\n */\nfunction factory(dictionary) {\n  var _a;\n  var db = new Database_1.Database(dictionary);\n  // Initialize database extensions.\n  sync_1.sync(db);\n  return Object.entries(dictionary).reduce(function (acc, _a) {\n    var _b = __read(_a, 2),\n      modelName = _b[0],\n      props = _b[1];\n    acc[modelName] = createModelApi(dictionary, modelName, props, db);\n    return acc;\n  }, (_a = {}, _a[glossary_1.DATABASE_INSTANCE] = db, _a));\n}\nexports.factory = factory;\nfunction createModelApi(dictionary, modelName, definition, db) {\n  var parsedModel = parseModelDefinition_1.parseModelDefinition(dictionary, modelName, definition);\n  var primaryKey = parsedModel.primaryKey;\n  var api = {\n    create: function (initialValues) {\n      if (initialValues === void 0) {\n        initialValues = {};\n      }\n      var entity = createModel_1.createModel(modelName, definition, dictionary, parsedModel, initialValues, db);\n      var entityId = entity[entity[glossary_1.PRIMARY_KEY]];\n      if (!entityId) {\n        throw new OperationError_1.OperationError(OperationError_1.OperationErrorType.MissingPrimaryKey, outvariant_1.format('Failed to create a \"%s\" entity: expected the primary key \"%s\" to have a value, but got: %s', modelName, primaryKey, entityId));\n      }\n      // Prevent creation of multiple entities with the same primary key value.\n      if (db.has(modelName, entityId)) {\n        throw new OperationError_1.OperationError(OperationError_1.OperationErrorType.DuplicatePrimaryKey, outvariant_1.format('Failed to create a \"%s\" entity: an entity with the same primary key \"%s\" (\"%s\") already exists.', modelName, entityId, entity[glossary_1.PRIMARY_KEY]));\n      }\n      db.create(modelName, entity);\n      return entity;\n    },\n    count: function (query) {\n      if (!query) {\n        return db.count(modelName);\n      }\n      var results = executeQuery_1.executeQuery(modelName, primaryKey, query, db);\n      return results.length;\n    },\n    findFirst: function (query) {\n      var results = executeQuery_1.executeQuery(modelName, primaryKey, query, db);\n      var firstResult = first_1.first(results);\n      if (query.strict && firstResult == null) {\n        throw new OperationError_1.OperationError(OperationError_1.OperationErrorType.EntityNotFound, outvariant_1.format('Failed to execute \"findFirst\" on the \"%s\" model: no entity found matching the query \"%j\".', modelName, query.where));\n      }\n      return firstResult;\n    },\n    findMany: function (query) {\n      var results = executeQuery_1.executeQuery(modelName, primaryKey, query, db);\n      if (results.length === 0 && query.strict) {\n        throw new OperationError_1.OperationError(OperationError_1.OperationErrorType.EntityNotFound, outvariant_1.format('Failed to execute \"findMany\" on the \"%s\" model: no entities found matching the query \"%j\".', modelName, query.where));\n      }\n      return results;\n    },\n    getAll: function () {\n      return db.listEntities(modelName);\n    },\n    update: function (_a) {\n      var strict = _a.strict,\n        query = __rest(_a, [\"strict\"]);\n      var results = executeQuery_1.executeQuery(modelName, primaryKey, query, db);\n      var prevRecord = first_1.first(results);\n      if (!prevRecord) {\n        if (strict) {\n          throw new OperationError_1.OperationError(OperationError_1.OperationErrorType.EntityNotFound, outvariant_1.format('Failed to execute \"update\" on the \"%s\" model: no entity found matching the query \"%j\".', modelName, query.where));\n        }\n        return null;\n      }\n      var nextRecord = updateEntity_1.updateEntity(prevRecord, query.data, definition);\n      if (nextRecord[prevRecord[glossary_1.PRIMARY_KEY]] !== prevRecord[prevRecord[glossary_1.PRIMARY_KEY]]) {\n        if (db.has(modelName, nextRecord[prevRecord[glossary_1.PRIMARY_KEY]])) {\n          throw new OperationError_1.OperationError(OperationError_1.OperationErrorType.DuplicatePrimaryKey, outvariant_1.format('Failed to execute \"update\" on the \"%s\" model: the entity with a primary key \"%s\" (\"%s\") already exists.', modelName, nextRecord[prevRecord[glossary_1.PRIMARY_KEY]], primaryKey));\n        }\n      }\n      db.update(modelName, prevRecord, nextRecord);\n      return nextRecord;\n    },\n    updateMany: function (_a) {\n      var strict = _a.strict,\n        query = __rest(_a, [\"strict\"]);\n      var records = executeQuery_1.executeQuery(modelName, primaryKey, query, db);\n      var updatedRecords = [];\n      if (records.length === 0) {\n        if (strict) {\n          throw new OperationError_1.OperationError(OperationError_1.OperationErrorType.EntityNotFound, outvariant_1.format('Failed to execute \"updateMany\" on the \"%s\" model: no entities found matching the query \"%j\".', modelName, query.where));\n        }\n        return null;\n      }\n      records.forEach(function (prevRecord) {\n        var nextRecord = updateEntity_1.updateEntity(prevRecord, query.data, definition);\n        if (nextRecord[prevRecord[glossary_1.PRIMARY_KEY]] !== prevRecord[prevRecord[glossary_1.PRIMARY_KEY]]) {\n          if (db.has(modelName, nextRecord[prevRecord[glossary_1.PRIMARY_KEY]])) {\n            throw new OperationError_1.OperationError(OperationError_1.OperationErrorType.DuplicatePrimaryKey, outvariant_1.format('Failed to execute \"updateMany\" on the \"%s\" model: the entity with a primary key \"%s\" (\"%s\") already exists.', modelName, nextRecord[prevRecord[glossary_1.PRIMARY_KEY]], primaryKey));\n          }\n        }\n        db.update(modelName, prevRecord, nextRecord);\n        updatedRecords.push(nextRecord);\n      });\n      return updatedRecords;\n    },\n    \"delete\": function (_a) {\n      var strict = _a.strict,\n        query = __rest(_a, [\"strict\"]);\n      var results = executeQuery_1.executeQuery(modelName, primaryKey, query, db);\n      var record = first_1.first(results);\n      if (!record) {\n        if (strict) {\n          throw new OperationError_1.OperationError(OperationError_1.OperationErrorType.EntityNotFound, outvariant_1.format('Failed to execute \"delete\" on the \"%s\" model: no entity found matching the query \"%o\".', modelName, query.where));\n        }\n        return null;\n      }\n      db[\"delete\"](modelName, record[record[glossary_1.PRIMARY_KEY]]);\n      return record;\n    },\n    deleteMany: function (_a) {\n      var strict = _a.strict,\n        query = __rest(_a, [\"strict\"]);\n      var records = executeQuery_1.executeQuery(modelName, primaryKey, query, db);\n      if (records.length === 0) {\n        if (strict) {\n          throw new OperationError_1.OperationError(OperationError_1.OperationErrorType.EntityNotFound, outvariant_1.format('Failed to execute \"deleteMany\" on the \"%s\" model: no entities found matching the query \"%o\".', modelName, query.where));\n        }\n        return null;\n      }\n      records.forEach(function (record) {\n        db[\"delete\"](modelName, record[record[glossary_1.PRIMARY_KEY]]);\n      });\n      return records;\n    },\n    toHandlers: function (type, baseUrl) {\n      if (type === 'graphql') {\n        return generateGraphQLHandlers_1.generateGraphQLHandlers(modelName, definition, api, baseUrl);\n      }\n      return generateRestHandlers_1.generateRestHandlers(modelName, definition, api, baseUrl);\n    },\n    toGraphQLSchema: function () {\n      return generateGraphQLHandlers_1.generateGraphQLSchema(modelName, definition, api);\n    }\n  };\n  return api;\n}","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}