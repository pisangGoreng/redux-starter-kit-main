{"ast":null,"code":"var _jsxFileName = \"/Users/endysantoso/Desktop/project/react/redux-starter-kit-main/src/features/posts/PostsList.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Link } from 'react-router-dom/cjs/react-router-dom.min';\nimport { PostAuthor } from './PostAuthor';\nimport { TimeAgo } from './TimeAgo';\nimport { ReactionButtons } from './ReactionButtons';\nimport { selectAllPosts, fetchPosts, selectPostsIds, selectPostsById } from './postsSlice';\nimport { Spinner } from '../../components/Spinner';\nimport { useGetPostsQuery } from '../../api/apiSlice';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet PostExcerpts = _ref => {\n  let {\n    post\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(\"article\", {\n    className: \"post-excerpt\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: post.title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(PostAuthor, {\n        userId: post.user\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TimeAgo, {\n        timestamp: post.date\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"post-content\",\n      children: post.content.substring(0, 100)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ReactionButtons, {\n      post: post\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Link, {\n      to: `/posts/${post.id}`,\n      className: \"button muted-button\",\n      children: \"View Post\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this)]\n  }, post.id, true, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 5\n  }, this);\n};\n_c = PostExcerpts;\nPostExcerpts = /*#__PURE__*/React.memo(PostExcerpts);\nexport function PostsList() {\n  _s();\n  const {\n    data: posts,\n    isLoading,\n    isSuccess,\n    isError,\n    error\n  } = useGetPostsQuery();\n  const orderedPostsIds = useSelector(selectPostsIds);\n  const postStatus = useSelector(state => state.posts.status);\n  useEffect(() => {\n    if (postStatus === 'idle') {\n      dispatch(fetchPosts());\n    }\n  }, [postStatus, dispatch]);\n  let content;\n  if (postStatus === 'loading') {\n    content = /*#__PURE__*/_jsxDEV(Spinner, {\n      text: \"loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 15\n    }, this);\n  } else if (postStatus === 'succeeded') {\n    // * sudah di sort di postsSlice -> postsAdapter\n    // const orderesPosts = posts\n    //   .slice()\n    //   .sort((a, b) => b.date.localeCompare(a.date))\n\n    content = orderedPostsIds.map(postId => /*#__PURE__*/_jsxDEV(PostExcerpts, {\n      postId: postId\n    }, postId, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this));\n  } else if (postStatus === 'error') {\n    content = /*#__PURE__*/_jsxDEV(\"div\", {\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 15\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \"posts-list\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Posts\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), content]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n}\n_s(PostsList, \"e5IdN4Pdw159C1y5MSsxlsewLyE=\", false, function () {\n  return [useGetPostsQuery, useSelector, useSelector];\n});\n_c2 = PostsList;\nvar _c, _c2;\n$RefreshReg$(_c, \"PostExcerpts\");\n$RefreshReg$(_c2, \"PostsList\");","map":{"version":3,"names":["React","useEffect","useDispatch","useSelector","Link","PostAuthor","TimeAgo","ReactionButtons","selectAllPosts","fetchPosts","selectPostsIds","selectPostsById","Spinner","useGetPostsQuery","jsxDEV","_jsxDEV","PostExcerpts","_ref","post","className","children","title","fileName","_jsxFileName","lineNumber","columnNumber","userId","user","timestamp","date","content","substring","to","id","_c","memo","PostsList","_s","data","posts","isLoading","isSuccess","isError","error","orderedPostsIds","postStatus","state","status","dispatch","text","map","postId","_c2","$RefreshReg$"],"sources":["/Users/endysantoso/Desktop/project/react/redux-starter-kit-main/src/features/posts/PostsList.js"],"sourcesContent":["import React, { useEffect } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { Link } from 'react-router-dom/cjs/react-router-dom.min'\nimport { PostAuthor } from './PostAuthor'\nimport { TimeAgo } from './TimeAgo'\nimport { ReactionButtons } from './ReactionButtons'\nimport {\n  selectAllPosts,\n  fetchPosts,\n  selectPostsIds,\n  selectPostsById,\n} from './postsSlice'\nimport { Spinner } from '../../components/Spinner'\nimport { useGetPostsQuery } from '../../api/apiSlice'\n\nlet PostExcerpts = ({ post }) => {\n  return (\n    <article className=\"post-excerpt\" key={post.id}>\n      <h3>{post.title}</h3>\n      <div>\n        <PostAuthor userId={post.user} />\n        <TimeAgo timestamp={post.date} />\n      </div>\n      <p className=\"post-content\">{post.content.substring(0, 100)}</p>\n      <ReactionButtons post={post} />\n      <Link to={`/posts/${post.id}`} className=\"button muted-button\">\n        View Post\n      </Link>\n    </article>\n  )\n}\nPostExcerpts = React.memo(PostExcerpts)\n\nexport function PostsList() {\n  const {\n    data: posts,\n    isLoading,\n    isSuccess,\n    isError,\n    error,\n  } = useGetPostsQuery()\n\n  const orderedPostsIds = useSelector(selectPostsIds)\n\n  const postStatus = useSelector((state) => state.posts.status)\n\n  useEffect(() => {\n    if (postStatus === 'idle') {\n      dispatch(fetchPosts())\n    }\n  }, [postStatus, dispatch])\n\n  let content\n  if (postStatus === 'loading') {\n    content = <Spinner text=\"loading...\" />\n  } else if (postStatus === 'succeeded') {\n    // * sudah di sort di postsSlice -> postsAdapter\n    // const orderesPosts = posts\n    //   .slice()\n    //   .sort((a, b) => b.date.localeCompare(a.date))\n\n    content = orderedPostsIds.map((postId) => (\n      <PostExcerpts key={postId} postId={postId} />\n    ))\n  } else if (postStatus === 'error') {\n    content = <div>{error}</div>\n  }\n\n  return (\n    <section className=\"posts-list\">\n      <h2>Posts</h2>\n      {content}\n    </section>\n  )\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}