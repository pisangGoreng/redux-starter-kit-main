{"ast":null,"code":"import { createSlice, nanoid, createAsyncThunk, createSelector, createEntityAdapter } from '@reduxjs/toolkit';\nimport { client } from '../../api/client';\nconst postsAdapter = createEntityAdapter({\n  sortComparer: (a, b) => b.date.localeCompare(a.date)\n});\nconst initialState = {\n  // posts: [],\n  status: 'idle',\n  // loading, sucess, failed, idle\n  error: null\n};\nexport const fetchPosts = createAsyncThunk('posts/fetchPosts', async () => {\n  const response = await client.get('/fakeApi/posts');\n  return response.data;\n});\nexport const addNewPost = createAsyncThunk('posts/addNewPost', async initialPost => {\n  const response = await client.post('/fakeApi/posts', initialPost);\n  return response.data;\n});\nconst postsSlice = createSlice({\n  name: 'posts',\n  initialState,\n  reducers: {\n    reactionAdded: (state, action) => {\n      const {\n        postId,\n        reaction\n      } = action.payload;\n      // const existingPost = state.posts.find((post) => post.id === postId)\n      const existingPost = state.entities[postId];\n      if (existingPost) {\n        existingPost.reactions[reaction]++;\n      }\n    },\n    postAdded: {\n      reducer: (state, action) => {\n        state.posts.push(action.payload);\n      },\n      prepare(title, content, userId) {\n        return {\n          payload: {\n            id: nanoid,\n            date: new Date().toISOString(),\n            user: userId,\n            title,\n            content,\n            reactions: {\n              thumbsUp: 0,\n              hooray: 0,\n              raisingHands: 0,\n              heart: 0,\n              rocket: 0\n            }\n          }\n        };\n      }\n    },\n    postUpdated: (state, action) => {\n      const {\n        id,\n        title,\n        content\n      } = action.payload;\n      // const existingPost = state.posts.find((post) => post.id === id)\n      const existingPost = state.entities[id];\n      if (existingPost) {\n        existingPost.title = title;\n        existingPost.content = content;\n      }\n    }\n  },\n  extraReducers(builder) {\n    builder.addCase(fetchPosts.pending, state => {\n      state.status = 'loading';\n    }).addCase(fetchPosts.fulfilled, (state, action) => {\n      state.status = 'succeeded';\n      // state.posts = state.posts.concat(action.payload)\n      postsAdapter.upsertMany(state, action.payload);\n    }).addCase(fetchPosts.rejected, (state, action) => {\n      state.status = 'failed';\n      state.error = action.error.message;\n    }).addCase(addNewPost.fulfilled, postsAdapter.addOne);\n  }\n});\nexport const {\n  postAdded,\n  postUpdated,\n  reactionAdded\n} = postsSlice.actions;\n\n// * biasakan buat reusable selector functions.\n// * jadi kalau ada perubahan structur di initial state, cukup rubah selector di slice nya aja\n// export const selectAllPosts = (state) => state.posts.posts\n\n// export const selectPostsById = (state, postId) =>\n//   state.posts.posts.find((post) => post.id === postId)\n\nexport const selectPostsByUser = createSelector([selectAllPosts, (state, userId) => userId], (posts, userId) => posts.filter(post => post.user === userId));\nexport const {\n  selectAll: selectAllPosts,\n  selectById: selectPostsById,\n  selectIds: selectPostsIds\n} = postsAdapter.getSelectors(state => state.posts);\nexport default postsSlice.reducer;","map":{"version":3,"names":["createSlice","nanoid","createAsyncThunk","createSelector","createEntityAdapter","client","postsAdapter","sortComparer","a","b","date","localeCompare","initialState","status","error","fetchPosts","response","get","data","addNewPost","initialPost","post","postsSlice","name","reducers","reactionAdded","state","action","postId","reaction","payload","existingPost","entities","reactions","postAdded","reducer","posts","push","prepare","title","content","userId","id","Date","toISOString","user","thumbsUp","hooray","raisingHands","heart","rocket","postUpdated","extraReducers","builder","addCase","pending","fulfilled","upsertMany","rejected","message","addOne","actions","selectPostsByUser","selectAllPosts","filter","selectAll","selectById","selectPostsById","selectIds","selectPostsIds","getSelectors"],"sources":["/Users/endysantoso/Desktop/project/react/redux-starter-kit-main/src/features/posts/postsSlice.js"],"sourcesContent":["import {\n  createSlice,\n  nanoid,\n  createAsyncThunk,\n  createSelector,\n  createEntityAdapter,\n} from '@reduxjs/toolkit'\nimport { client } from '../../api/client'\n\nconst postsAdapter = createEntityAdapter({\n  sortComparer: (a, b) => b.date.localeCompare(a.date),\n})\n\nconst initialState = {\n  // posts: [],\n  status: 'idle', // loading, sucess, failed, idle\n  error: null,\n}\n\nexport const fetchPosts = createAsyncThunk('posts/fetchPosts', async () => {\n  const response = await client.get('/fakeApi/posts')\n  return response.data\n})\n\nexport const addNewPost = createAsyncThunk(\n  'posts/addNewPost',\n  async (initialPost) => {\n    const response = await client.post('/fakeApi/posts', initialPost)\n    return response.data\n  }\n)\n\nconst postsSlice = createSlice({\n  name: 'posts',\n  initialState,\n  reducers: {\n    reactionAdded: (state, action) => {\n      const { postId, reaction } = action.payload\n      // const existingPost = state.posts.find((post) => post.id === postId)\n      const existingPost = state.entities[postId]\n      if (existingPost) {\n        existingPost.reactions[reaction]++\n      }\n    },\n    postAdded: {\n      reducer: (state, action) => {\n        state.posts.push(action.payload)\n      },\n      prepare(title, content, userId) {\n        return {\n          payload: {\n            id: nanoid,\n            date: new Date().toISOString(),\n            user: userId,\n            title,\n            content,\n            reactions: {\n              thumbsUp: 0,\n              hooray: 0,\n              raisingHands: 0,\n              heart: 0,\n              rocket: 0,\n            },\n          },\n        }\n      },\n    },\n    postUpdated: (state, action) => {\n      const { id, title, content } = action.payload\n      // const existingPost = state.posts.find((post) => post.id === id)\n      const existingPost = state.entities[id]\n      if (existingPost) {\n        existingPost.title = title\n        existingPost.content = content\n      }\n    },\n  },\n  extraReducers(builder) {\n    builder\n      .addCase(fetchPosts.pending, (state) => {\n        state.status = 'loading'\n      })\n      .addCase(fetchPosts.fulfilled, (state, action) => {\n        state.status = 'succeeded'\n        // state.posts = state.posts.concat(action.payload)\n        postsAdapter.upsertMany(state, action.payload)\n      })\n      .addCase(fetchPosts.rejected, (state, action) => {\n        state.status = 'failed'\n        state.error = action.error.message\n      })\n\n      .addCase(addNewPost.fulfilled, postsAdapter.addOne)\n  },\n})\n\nexport const { postAdded, postUpdated, reactionAdded } = postsSlice.actions\n\n// * biasakan buat reusable selector functions.\n// * jadi kalau ada perubahan structur di initial state, cukup rubah selector di slice nya aja\n// export const selectAllPosts = (state) => state.posts.posts\n\n// export const selectPostsById = (state, postId) =>\n//   state.posts.posts.find((post) => post.id === postId)\n\nexport const selectPostsByUser = createSelector(\n  [selectAllPosts, (state, userId) => userId],\n  (posts, userId) => posts.filter((post) => post.user === userId)\n)\n\nexport const {\n  selectAll: selectAllPosts,\n  selectById: selectPostsById,\n  selectIds: selectPostsIds,\n} = postsAdapter.getSelectors((state) => state.posts)\n\nexport default postsSlice.reducer\n"],"mappings":"AAAA,SACEA,WAAW,EACXC,MAAM,EACNC,gBAAgB,EAChBC,cAAc,EACdC,mBAAmB,QACd,kBAAkB;AACzB,SAASC,MAAM,QAAQ,kBAAkB;AAEzC,MAAMC,YAAY,GAAGF,mBAAmB,CAAC;EACvCG,YAAY,EAAEA,CAACC,CAAC,EAAEC,CAAC,KAAKA,CAAC,CAACC,IAAI,CAACC,aAAa,CAACH,CAAC,CAACE,IAAI;AACrD,CAAC,CAAC;AAEF,MAAME,YAAY,GAAG;EACnB;EACAC,MAAM,EAAE,MAAM;EAAE;EAChBC,KAAK,EAAE;AACT,CAAC;AAED,OAAO,MAAMC,UAAU,GAAGb,gBAAgB,CAAC,kBAAkB,EAAE,YAAY;EACzE,MAAMc,QAAQ,GAAG,MAAMX,MAAM,CAACY,GAAG,CAAC,gBAAgB,CAAC;EACnD,OAAOD,QAAQ,CAACE,IAAI;AACtB,CAAC,CAAC;AAEF,OAAO,MAAMC,UAAU,GAAGjB,gBAAgB,CACxC,kBAAkB,EAClB,MAAOkB,WAAW,IAAK;EACrB,MAAMJ,QAAQ,GAAG,MAAMX,MAAM,CAACgB,IAAI,CAAC,gBAAgB,EAAED,WAAW,CAAC;EACjE,OAAOJ,QAAQ,CAACE,IAAI;AACtB,CAAC,CACF;AAED,MAAMI,UAAU,GAAGtB,WAAW,CAAC;EAC7BuB,IAAI,EAAE,OAAO;EACbX,YAAY;EACZY,QAAQ,EAAE;IACRC,aAAa,EAAEA,CAACC,KAAK,EAAEC,MAAM,KAAK;MAChC,MAAM;QAAEC,MAAM;QAAEC;MAAS,CAAC,GAAGF,MAAM,CAACG,OAAO;MAC3C;MACA,MAAMC,YAAY,GAAGL,KAAK,CAACM,QAAQ,CAACJ,MAAM,CAAC;MAC3C,IAAIG,YAAY,EAAE;QAChBA,YAAY,CAACE,SAAS,CAACJ,QAAQ,CAAC,EAAE;MACpC;IACF,CAAC;IACDK,SAAS,EAAE;MACTC,OAAO,EAAEA,CAACT,KAAK,EAAEC,MAAM,KAAK;QAC1BD,KAAK,CAACU,KAAK,CAACC,IAAI,CAACV,MAAM,CAACG,OAAO,CAAC;MAClC,CAAC;MACDQ,OAAOA,CAACC,KAAK,EAAEC,OAAO,EAAEC,MAAM,EAAE;QAC9B,OAAO;UACLX,OAAO,EAAE;YACPY,EAAE,EAAEzC,MAAM;YACVS,IAAI,EAAE,IAAIiC,IAAI,EAAE,CAACC,WAAW,EAAE;YAC9BC,IAAI,EAAEJ,MAAM;YACZF,KAAK;YACLC,OAAO;YACPP,SAAS,EAAE;cACTa,QAAQ,EAAE,CAAC;cACXC,MAAM,EAAE,CAAC;cACTC,YAAY,EAAE,CAAC;cACfC,KAAK,EAAE,CAAC;cACRC,MAAM,EAAE;YACV;UACF;QACF,CAAC;MACH;IACF,CAAC;IACDC,WAAW,EAAEA,CAACzB,KAAK,EAAEC,MAAM,KAAK;MAC9B,MAAM;QAAEe,EAAE;QAAEH,KAAK;QAAEC;MAAQ,CAAC,GAAGb,MAAM,CAACG,OAAO;MAC7C;MACA,MAAMC,YAAY,GAAGL,KAAK,CAACM,QAAQ,CAACU,EAAE,CAAC;MACvC,IAAIX,YAAY,EAAE;QAChBA,YAAY,CAACQ,KAAK,GAAGA,KAAK;QAC1BR,YAAY,CAACS,OAAO,GAAGA,OAAO;MAChC;IACF;EACF,CAAC;EACDY,aAAaA,CAACC,OAAO,EAAE;IACrBA,OAAO,CACJC,OAAO,CAACvC,UAAU,CAACwC,OAAO,EAAG7B,KAAK,IAAK;MACtCA,KAAK,CAACb,MAAM,GAAG,SAAS;IAC1B,CAAC,CAAC,CACDyC,OAAO,CAACvC,UAAU,CAACyC,SAAS,EAAE,CAAC9B,KAAK,EAAEC,MAAM,KAAK;MAChDD,KAAK,CAACb,MAAM,GAAG,WAAW;MAC1B;MACAP,YAAY,CAACmD,UAAU,CAAC/B,KAAK,EAAEC,MAAM,CAACG,OAAO,CAAC;IAChD,CAAC,CAAC,CACDwB,OAAO,CAACvC,UAAU,CAAC2C,QAAQ,EAAE,CAAChC,KAAK,EAAEC,MAAM,KAAK;MAC/CD,KAAK,CAACb,MAAM,GAAG,QAAQ;MACvBa,KAAK,CAACZ,KAAK,GAAGa,MAAM,CAACb,KAAK,CAAC6C,OAAO;IACpC,CAAC,CAAC,CAEDL,OAAO,CAACnC,UAAU,CAACqC,SAAS,EAAElD,YAAY,CAACsD,MAAM,CAAC;EACvD;AACF,CAAC,CAAC;AAEF,OAAO,MAAM;EAAE1B,SAAS;EAAEiB,WAAW;EAAE1B;AAAc,CAAC,GAAGH,UAAU,CAACuC,OAAO;;AAE3E;AACA;AACA;;AAEA;AACA;;AAEA,OAAO,MAAMC,iBAAiB,GAAG3D,cAAc,CAC7C,CAAC4D,cAAc,EAAE,CAACrC,KAAK,EAAEe,MAAM,KAAKA,MAAM,CAAC,EAC3C,CAACL,KAAK,EAAEK,MAAM,KAAKL,KAAK,CAAC4B,MAAM,CAAE3C,IAAI,IAAKA,IAAI,CAACwB,IAAI,KAAKJ,MAAM,CAAC,CAChE;AAED,OAAO,MAAM;EACXwB,SAAS,EAAEF,cAAc;EACzBG,UAAU,EAAEC,eAAe;EAC3BC,SAAS,EAAEC;AACb,CAAC,GAAG/D,YAAY,CAACgE,YAAY,CAAE5C,KAAK,IAAKA,KAAK,CAACU,KAAK,CAAC;AAErD,eAAed,UAAU,CAACa,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}