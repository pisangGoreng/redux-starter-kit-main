{"ast":null,"code":"import { createSlice, nanoid } from '@reduxjs/toolkit';\nimport { sub } from 'date-fns';\nconst initialState = {\n  posts: [],\n  status: 'idle',\n  error: null\n};\nconst postsSlice = createSlice({\n  name: 'posts',\n  initialState,\n  reducers: {\n    reactionAdded: (state, action) => {\n      const {\n        postId,\n        reaction\n      } = action.payload;\n      const existingPost = state.find(post => post.id === postId);\n      if (existingPost) {\n        existingPost.reactions[reaction]++;\n      }\n    },\n    postAdded: {\n      reducer: (state, action) => {\n        state.push(action.payload);\n      },\n      prepare(title, content, userId) {\n        return {\n          payload: {\n            id: nanoid,\n            date: new Date().toISOString(),\n            user: userId,\n            title,\n            content,\n            reactions: {\n              thumbsUp: 0,\n              hooray: 0,\n              raisingHands: 0,\n              heart: 0,\n              rocket: 0\n            }\n          }\n        };\n      }\n    },\n    postUpdated: (state, action) => {\n      const {\n        id,\n        title,\n        content\n      } = action.payload;\n      const existingPost = state.find(post => post.id === id);\n      if (existingPost) {\n        existingPost.title = title;\n        existingPost.content = content;\n      }\n    }\n  }\n});\nexport const {\n  postAdded,\n  postUpdated,\n  reactionAdded\n} = postsSlice.actions;\n\n// * biasakan export\nexport const selectAllPosts = state => state.posts;\nexport const selectPostsById = (state, postId) => state.posts.find(post => post.id === postId);\nexport default postsSlice.reducer;","map":{"version":3,"names":["createSlice","nanoid","sub","initialState","posts","status","error","postsSlice","name","reducers","reactionAdded","state","action","postId","reaction","payload","existingPost","find","post","id","reactions","postAdded","reducer","push","prepare","title","content","userId","date","Date","toISOString","user","thumbsUp","hooray","raisingHands","heart","rocket","postUpdated","actions","selectAllPosts","selectPostsById"],"sources":["/Users/endysantoso/Desktop/project/react/redux-starter-kit-main/src/features/posts/postsSlice.js"],"sourcesContent":["import { createSlice, nanoid } from '@reduxjs/toolkit'\nimport { sub } from 'date-fns'\n\nconst initialState = {\n  posts: [],\n  status: 'idle',\n  error: null,\n}\n\nconst postsSlice = createSlice({\n  name: 'posts',\n  initialState,\n  reducers: {\n    reactionAdded: (state, action) => {\n      const { postId, reaction } = action.payload\n      const existingPost = state.find((post) => post.id === postId)\n      if (existingPost) {\n        existingPost.reactions[reaction]++\n      }\n    },\n    postAdded: {\n      reducer: (state, action) => {\n        state.push(action.payload)\n      },\n      prepare(title, content, userId) {\n        return {\n          payload: {\n            id: nanoid,\n            date: new Date().toISOString(),\n            user: userId,\n            title,\n            content,\n            reactions: {\n              thumbsUp: 0,\n              hooray: 0,\n              raisingHands: 0,\n              heart: 0,\n              rocket: 0,\n            },\n          },\n        }\n      },\n    },\n    postUpdated: (state, action) => {\n      const { id, title, content } = action.payload\n      const existingPost = state.find((post) => post.id === id)\n      if (existingPost) {\n        existingPost.title = title\n        existingPost.content = content\n      }\n    },\n  },\n})\n\nexport const { postAdded, postUpdated, reactionAdded } = postsSlice.actions\n\n// * biasakan export\nexport const selectAllPosts = (state) => state.posts\n\nexport const selectPostsById = (state, postId) =>\n  state.posts.find((post) => post.id === postId)\n\nexport default postsSlice.reducer\n"],"mappings":"AAAA,SAASA,WAAW,EAAEC,MAAM,QAAQ,kBAAkB;AACtD,SAASC,GAAG,QAAQ,UAAU;AAE9B,MAAMC,YAAY,GAAG;EACnBC,KAAK,EAAE,EAAE;EACTC,MAAM,EAAE,MAAM;EACdC,KAAK,EAAE;AACT,CAAC;AAED,MAAMC,UAAU,GAAGP,WAAW,CAAC;EAC7BQ,IAAI,EAAE,OAAO;EACbL,YAAY;EACZM,QAAQ,EAAE;IACRC,aAAa,EAAEA,CAACC,KAAK,EAAEC,MAAM,KAAK;MAChC,MAAM;QAAEC,MAAM;QAAEC;MAAS,CAAC,GAAGF,MAAM,CAACG,OAAO;MAC3C,MAAMC,YAAY,GAAGL,KAAK,CAACM,IAAI,CAAEC,IAAI,IAAKA,IAAI,CAACC,EAAE,KAAKN,MAAM,CAAC;MAC7D,IAAIG,YAAY,EAAE;QAChBA,YAAY,CAACI,SAAS,CAACN,QAAQ,CAAC,EAAE;MACpC;IACF,CAAC;IACDO,SAAS,EAAE;MACTC,OAAO,EAAEA,CAACX,KAAK,EAAEC,MAAM,KAAK;QAC1BD,KAAK,CAACY,IAAI,CAACX,MAAM,CAACG,OAAO,CAAC;MAC5B,CAAC;MACDS,OAAOA,CAACC,KAAK,EAAEC,OAAO,EAAEC,MAAM,EAAE;QAC9B,OAAO;UACLZ,OAAO,EAAE;YACPI,EAAE,EAAElB,MAAM;YACV2B,IAAI,EAAE,IAAIC,IAAI,EAAE,CAACC,WAAW,EAAE;YAC9BC,IAAI,EAAEJ,MAAM;YACZF,KAAK;YACLC,OAAO;YACPN,SAAS,EAAE;cACTY,QAAQ,EAAE,CAAC;cACXC,MAAM,EAAE,CAAC;cACTC,YAAY,EAAE,CAAC;cACfC,KAAK,EAAE,CAAC;cACRC,MAAM,EAAE;YACV;UACF;QACF,CAAC;MACH;IACF,CAAC;IACDC,WAAW,EAAEA,CAAC1B,KAAK,EAAEC,MAAM,KAAK;MAC9B,MAAM;QAAEO,EAAE;QAAEM,KAAK;QAAEC;MAAQ,CAAC,GAAGd,MAAM,CAACG,OAAO;MAC7C,MAAMC,YAAY,GAAGL,KAAK,CAACM,IAAI,CAAEC,IAAI,IAAKA,IAAI,CAACC,EAAE,KAAKA,EAAE,CAAC;MACzD,IAAIH,YAAY,EAAE;QAChBA,YAAY,CAACS,KAAK,GAAGA,KAAK;QAC1BT,YAAY,CAACU,OAAO,GAAGA,OAAO;MAChC;IACF;EACF;AACF,CAAC,CAAC;AAEF,OAAO,MAAM;EAAEL,SAAS;EAAEgB,WAAW;EAAE3B;AAAc,CAAC,GAAGH,UAAU,CAAC+B,OAAO;;AAE3E;AACA,OAAO,MAAMC,cAAc,GAAI5B,KAAK,IAAKA,KAAK,CAACP,KAAK;AAEpD,OAAO,MAAMoC,eAAe,GAAGA,CAAC7B,KAAK,EAAEE,MAAM,KAC3CF,KAAK,CAACP,KAAK,CAACa,IAAI,CAAEC,IAAI,IAAKA,IAAI,CAACC,EAAE,KAAKN,MAAM,CAAC;AAEhD,eAAeN,UAAU,CAACe,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}