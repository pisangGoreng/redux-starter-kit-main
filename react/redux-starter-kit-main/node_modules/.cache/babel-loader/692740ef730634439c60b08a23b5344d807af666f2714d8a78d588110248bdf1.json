{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nexports.__esModule = true;\nexports.Database = exports.SERIALIZED_INTERNAL_PROPERTIES_KEY = void 0;\nvar md5_1 = __importDefault(require(\"md5\"));\nvar outvariant_1 = require(\"outvariant\");\nvar strict_event_emitter_1 = require(\"strict-event-emitter\");\nvar glossary_1 = require(\"../glossary\");\nexports.SERIALIZED_INTERNAL_PROPERTIES_KEY = 'SERIALIZED_INTERNAL_PROPERTIES';\nvar callOrder = 0;\nvar Database = /** @class */function () {\n  function Database(dictionary) {\n    this.events = new strict_event_emitter_1.StrictEventEmitter();\n    this.models = Object.keys(dictionary).reduce(function (acc, modelName) {\n      acc[modelName] = new Map();\n      return acc;\n    }, {});\n    callOrder++;\n    this.id = this.generateId();\n  }\n  /**\n   * Generates a unique MD5 hash based on the database\n   * module location and invocation order. Used to reproducibly\n   * identify a database instance among sibling instances.\n   */\n  Database.prototype.generateId = function () {\n    var stack = new Error().stack;\n    var callFrame = stack === null || stack === void 0 ? void 0 : stack.split('\\n')[4];\n    var salt = callOrder + \"-\" + (callFrame === null || callFrame === void 0 ? void 0 : callFrame.trim());\n    return md5_1[\"default\"](salt);\n  };\n  Database.prototype.serializeEntity = function (entity) {\n    var _a;\n    return __assign(__assign({}, entity), (_a = {}, _a[exports.SERIALIZED_INTERNAL_PROPERTIES_KEY] = {\n      entityType: entity[glossary_1.ENTITY_TYPE],\n      primaryKey: entity[glossary_1.PRIMARY_KEY]\n    }, _a));\n  };\n  Database.prototype.getModel = function (name) {\n    return this.models[name];\n  };\n  Database.prototype.create = function (modelName, entity, customPrimaryKey) {\n    outvariant_1.invariant(entity[glossary_1.ENTITY_TYPE], 'Failed to create a new \"%s\" record: provided entity has no type. %j', modelName, entity);\n    outvariant_1.invariant(entity[glossary_1.PRIMARY_KEY], 'Failed to create a new \"%s\" record: provided entity has no primary key. %j', modelName, entity);\n    var primaryKey = customPrimaryKey || entity[entity[glossary_1.PRIMARY_KEY]];\n    this.events.emit('create', this.id, [modelName, this.serializeEntity(entity), customPrimaryKey]);\n    return this.getModel(modelName).set(primaryKey, entity);\n  };\n  Database.prototype.update = function (modelName, prevEntity, nextEntity) {\n    var prevPrimaryKey = prevEntity[prevEntity[glossary_1.PRIMARY_KEY]];\n    var nextPrimaryKey = nextEntity[prevEntity[glossary_1.PRIMARY_KEY]];\n    if (nextPrimaryKey !== prevPrimaryKey) {\n      this[\"delete\"](modelName, prevPrimaryKey);\n    }\n    this.getModel(modelName).set(nextPrimaryKey, nextEntity);\n    // this.create(modelName, nextEntity, nextPrimaryKey)\n    this.events.emit('update', this.id, [modelName, this.serializeEntity(prevEntity), this.serializeEntity(nextEntity)]);\n  };\n  Database.prototype[\"delete\"] = function (modelName, primaryKey) {\n    this.getModel(modelName)[\"delete\"](primaryKey);\n    this.events.emit('delete', this.id, [modelName, primaryKey]);\n  };\n  Database.prototype.has = function (modelName, primaryKey) {\n    return this.getModel(modelName).has(primaryKey);\n  };\n  Database.prototype.count = function (modelName) {\n    return this.getModel(modelName).size;\n  };\n  Database.prototype.listEntities = function (modelName) {\n    return Array.from(this.getModel(modelName).values());\n  };\n  return Database;\n}();\nexports.Database = Database;","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}