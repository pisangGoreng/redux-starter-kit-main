{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function () {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nvar __values = this && this.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n    m = s && o[s],\n    i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createXMLHttpRequestOverride = void 0;\nvar until_1 = require(\"@open-draft/until\");\nvar headers_polyfill_1 = require(\"headers-polyfill\");\nvar xmldom_1 = require(\"@xmldom/xmldom\");\nvar parseJson_1 = require(\"../../utils/parseJson\");\nvar toIsoResponse_1 = require(\"../../utils/toIsoResponse\");\nvar bufferFrom_1 = require(\"./utils/bufferFrom\");\nvar createEvent_1 = require(\"./utils/createEvent\");\nvar IsomorphicRequest_1 = require(\"../../IsomorphicRequest\");\nvar bufferUtils_1 = require(\"../../utils/bufferUtils\");\nvar InteractiveIsomorphicRequest_1 = require(\"../../InteractiveIsomorphicRequest\");\nvar createXMLHttpRequestOverride = function (options) {\n  var _a;\n  var XMLHttpRequest = options.XMLHttpRequest,\n    emitter = options.emitter,\n    log = options.log;\n  return _a = /** @class */function () {\n    function XMLHttpRequestOverride() {\n      // Collection of events modified by `addEventListener`/`removeEventListener` calls.\n      this._events = [];\n      this.log = log;\n      this.UNSENT = 0;\n      this.OPENED = 1;\n      this.HEADERS_RECEIVED = 2;\n      this.LOADING = 3;\n      this.DONE = 4;\n      this.onreadystatechange = null;\n      /* Events */\n      this.onabort = null;\n      this.onerror = null;\n      this.onload = null;\n      this.onloadend = null;\n      this.onloadstart = null;\n      this.onprogress = null;\n      this.ontimeout = null;\n      this.url = '';\n      this.method = 'GET';\n      this.readyState = this.UNSENT;\n      this.withCredentials = false;\n      this.status = 200;\n      this.statusText = 'OK';\n      this.response = '';\n      this.responseType = 'text';\n      this.responseText = '';\n      this.responseXML = null;\n      this.responseURL = '';\n      this.upload = {};\n      this.timeout = 0;\n      this._requestHeaders = new headers_polyfill_1.Headers();\n      this._responseHeaders = new headers_polyfill_1.Headers();\n    }\n    XMLHttpRequestOverride.prototype.setReadyState = function (nextState) {\n      if (nextState === this.readyState) {\n        return;\n      }\n      this.log('readyState change %d -> %d', this.readyState, nextState);\n      this.readyState = nextState;\n      if (nextState !== this.UNSENT) {\n        this.log('triggering readystate change...');\n        this.trigger('readystatechange');\n      }\n    };\n    /**\n     * Triggers both direct callback and attached event listeners\n     * for the given event.\n     */\n    XMLHttpRequestOverride.prototype.trigger = function (eventName, options) {\n      var e_1, _a;\n      this.log('trigger \"%s\" (%d)', eventName, this.readyState);\n      this.log('resolve listener for event \"%s\"', eventName);\n      // @ts-expect-error XMLHttpRequest class has no index signature.\n      var callback = this[\"on\" + eventName];\n      callback === null || callback === void 0 ? void 0 : callback.call(this, createEvent_1.createEvent(this, eventName, options));\n      try {\n        for (var _b = __values(this._events), _c = _b.next(); !_c.done; _c = _b.next()) {\n          var event_1 = _c.value;\n          if (event_1.name === eventName) {\n            log('calling mock event listener \"%s\" (%d)', eventName, this.readyState);\n            event_1.listener.call(this, createEvent_1.createEvent(this, eventName, options));\n          }\n        }\n      } catch (e_1_1) {\n        e_1 = {\n          error: e_1_1\n        };\n      } finally {\n        try {\n          if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n        } finally {\n          if (e_1) throw e_1.error;\n        }\n      }\n      return this;\n    };\n    XMLHttpRequestOverride.prototype.reset = function () {\n      this.log('reset');\n      this.setReadyState(this.UNSENT);\n      this.status = 200;\n      this.statusText = 'OK';\n      this.response = null;\n      this.responseText = null;\n      this.responseXML = null;\n      this._requestHeaders = new headers_polyfill_1.Headers();\n      this._responseHeaders = new headers_polyfill_1.Headers();\n    };\n    XMLHttpRequestOverride.prototype.open = function (method, url, async, user, password) {\n      if (async === void 0) {\n        async = true;\n      }\n      return __awaiter(this, void 0, void 0, function () {\n        return __generator(this, function (_a) {\n          this.log = this.log.extend(\"request \" + method + \" \" + url);\n          this.log('open', {\n            method: method,\n            url: url,\n            async: async,\n            user: user,\n            password: password\n          });\n          this.reset();\n          this.setReadyState(this.OPENED);\n          if (typeof url === 'undefined') {\n            this.url = method;\n            this.method = 'GET';\n          } else {\n            this.url = url;\n            this.method = method;\n            this.async = async;\n            this.user = user;\n            this.password = password;\n          }\n          return [2 /*return*/];\n        });\n      });\n    };\n\n    XMLHttpRequestOverride.prototype.send = function (data) {\n      var _this = this;\n      this.log('send %s %s', this.method, this.url);\n      var buffer;\n      if (typeof data === 'string') {\n        buffer = bufferUtils_1.encodeBuffer(data);\n      } else {\n        buffer = data || new ArrayBuffer(0);\n      }\n      var url;\n      try {\n        url = new URL(this.url);\n      } catch (error) {\n        // Assume a relative URL, if construction of a new `URL` instance fails.\n        // Since `XMLHttpRequest` always executed in a DOM-like environment,\n        // resolve the relative request URL against the current window location.\n        url = new URL(this.url, window.location.href);\n      }\n      this.log('request headers', this._requestHeaders);\n      // Create an intercepted request instance exposed to the request intercepting middleware.\n      var isomorphicRequest = new IsomorphicRequest_1.IsomorphicRequest(url, {\n        body: buffer,\n        method: this.method,\n        headers: this._requestHeaders,\n        credentials: this.withCredentials ? 'include' : 'omit'\n      });\n      var interactiveIsomorphicRequest = new InteractiveIsomorphicRequest_1.InteractiveIsomorphicRequest(isomorphicRequest);\n      this.log('emitting the \"request\" event for %d listener(s)...', emitter.listenerCount('request'));\n      emitter.emit('request', interactiveIsomorphicRequest);\n      this.log('awaiting mocked response...');\n      Promise.resolve(until_1.until(function () {\n        return __awaiter(_this, void 0, void 0, function () {\n          var _a, mockedResponse;\n          return __generator(this, function (_b) {\n            switch (_b.label) {\n              case 0:\n                return [4 /*yield*/, emitter.untilIdle('request', function (_a) {\n                  var _b = __read(_a.args, 1),\n                    request = _b[0];\n                  return request.id === interactiveIsomorphicRequest.id;\n                })];\n              case 1:\n                _b.sent();\n                this.log('all request listeners have been resolved!');\n                return [4 /*yield*/, interactiveIsomorphicRequest.respondWith.invoked()];\n              case 2:\n                _a = __read.apply(void 0, [_b.sent(), 1]), mockedResponse = _a[0];\n                this.log('event.respondWith called with:', mockedResponse);\n                return [2 /*return*/, mockedResponse];\n            }\n          });\n        });\n      })).then(function (_a) {\n        var _b, _c;\n        var _d = __read(_a, 2),\n          middlewareException = _d[0],\n          mockedResponse = _d[1];\n        // When the request middleware throws an exception, error the request.\n        // This cancels the request and is similar to a network error.\n        if (middlewareException) {\n          _this.log('middleware function threw an exception!', middlewareException);\n          // No way to propagate the actual error message.\n          _this.trigger('error');\n          _this.abort();\n          return;\n        }\n        // Return a mocked response, if provided in the middleware.\n        if (mockedResponse) {\n          _this.log('received mocked response', mockedResponse);\n          // Trigger a loadstart event to indicate the initialization of the fetch.\n          _this.trigger('loadstart');\n          _this.status = (_b = mockedResponse.status) !== null && _b !== void 0 ? _b : 200;\n          _this.statusText = mockedResponse.statusText || 'OK';\n          _this._responseHeaders = mockedResponse.headers ? headers_polyfill_1.objectToHeaders(mockedResponse.headers) : new headers_polyfill_1.Headers();\n          _this.log('set response status', _this.status, _this.statusText);\n          _this.log('set response headers', _this._responseHeaders);\n          // Mark that response headers has been received\n          // and trigger a ready state event to reflect received headers\n          // in a custom `onreadystatechange` callback.\n          _this.setReadyState(_this.HEADERS_RECEIVED);\n          _this.log('response type', _this.responseType);\n          _this.response = _this.getResponseBody(mockedResponse.body);\n          _this.responseURL = _this.url;\n          _this.responseText = mockedResponse.body || '';\n          _this.responseXML = _this.getResponseXML();\n          _this.log('set response body', _this.response);\n          if (mockedResponse.body && _this.response) {\n            _this.setReadyState(_this.LOADING);\n            // Presence of the mocked response implies a response body (not null).\n            // Presence of the coerced `this.response` implies the mocked body is valid.\n            var bodyBuffer = bufferFrom_1.bufferFrom(mockedResponse.body);\n            // Trigger a progress event based on the mocked response body.\n            _this.trigger('progress', {\n              loaded: bodyBuffer.length,\n              total: bodyBuffer.length\n            });\n          }\n          /**\n           * Explicitly mark the request as done so its response never hangs.\n           * @see https://github.com/mswjs/interceptors/issues/13\n           */\n          _this.setReadyState(_this.DONE);\n          // Trigger a load event to indicate the fetch has succeeded.\n          _this.trigger('load');\n          // Trigger a loadend event to indicate the fetch has completed.\n          _this.trigger('loadend');\n          emitter.emit('response', isomorphicRequest, toIsoResponse_1.toIsoResponse(mockedResponse));\n        } else {\n          _this.log('no mocked response received!');\n          // Perform an original request, when the request middleware returned no mocked response.\n          var originalRequest_1 = new XMLHttpRequest();\n          _this.log('opening an original request %s %s', _this.method, _this.url);\n          originalRequest_1.open(_this.method, _this.url, (_c = _this.async) !== null && _c !== void 0 ? _c : true, _this.user, _this.password);\n          // Reflect a successful state of the original request\n          // on the patched instance.\n          originalRequest_1.addEventListener('load', function () {\n            _this.log('original \"onload\"');\n            _this.status = originalRequest_1.status;\n            _this.statusText = originalRequest_1.statusText;\n            _this.responseURL = originalRequest_1.responseURL;\n            _this.responseType = originalRequest_1.responseType;\n            _this.response = originalRequest_1.response;\n            _this.responseText = originalRequest_1.responseText;\n            _this.responseXML = originalRequest_1.responseXML;\n            _this.log('set mock request readyState to DONE');\n            // Explicitly mark the mocked request instance as done\n            // so the response never hangs.\n            /**\n             * @note `readystatechange` listener is called TWICE\n             * in the case of unhandled request.\n             */\n            _this.setReadyState(_this.DONE);\n            _this.log('received original response', _this.status, _this.statusText);\n            _this.log('original response body:', _this.response);\n            var responseHeaders = originalRequest_1.getAllResponseHeaders();\n            _this.log('original response headers:\\n', responseHeaders);\n            _this._responseHeaders = headers_polyfill_1.stringToHeaders(responseHeaders);\n            _this.log('original response headers (normalized)', _this._responseHeaders);\n            _this.log('original response finished');\n            emitter.emit('response', isomorphicRequest, {\n              status: originalRequest_1.status,\n              statusText: originalRequest_1.statusText,\n              headers: _this._responseHeaders,\n              body: originalRequest_1.response\n            });\n          });\n          // Assign callbacks and event listeners from the intercepted XHR instance\n          // to the original XHR instance.\n          _this.propagateCallbacks(originalRequest_1);\n          _this.propagateListeners(originalRequest_1);\n          _this.propagateHeaders(originalRequest_1, _this._requestHeaders);\n          if (_this.async) {\n            originalRequest_1.timeout = _this.timeout;\n          }\n          _this.log('send', data);\n          originalRequest_1.send(data);\n        }\n      });\n    };\n    XMLHttpRequestOverride.prototype.abort = function () {\n      this.log('abort');\n      if (this.readyState > this.UNSENT && this.readyState < this.DONE) {\n        this.setReadyState(this.UNSENT);\n        this.trigger('abort');\n      }\n    };\n    XMLHttpRequestOverride.prototype.dispatchEvent = function () {\n      return false;\n    };\n    XMLHttpRequestOverride.prototype.setRequestHeader = function (name, value) {\n      this.log('set request header \"%s\" to \"%s\"', name, value);\n      this._requestHeaders.append(name, value);\n    };\n    XMLHttpRequestOverride.prototype.getResponseHeader = function (name) {\n      this.log('get response header \"%s\"', name);\n      if (this.readyState < this.HEADERS_RECEIVED) {\n        this.log('cannot return a header: headers not received (state: %s)', this.readyState);\n        return null;\n      }\n      var headerValue = this._responseHeaders.get(name);\n      this.log('resolved response header \"%s\" to \"%s\"', name, headerValue, this._responseHeaders);\n      return headerValue;\n    };\n    XMLHttpRequestOverride.prototype.getAllResponseHeaders = function () {\n      this.log('get all response headers');\n      if (this.readyState < this.HEADERS_RECEIVED) {\n        this.log('cannot return headers: headers not received (state: %s)', this.readyState);\n        return '';\n      }\n      return headers_polyfill_1.headersToString(this._responseHeaders);\n    };\n    XMLHttpRequestOverride.prototype.addEventListener = function (name, listener) {\n      this.log('addEventListener', name, listener);\n      this._events.push({\n        name: name,\n        listener: listener\n      });\n    };\n    XMLHttpRequestOverride.prototype.removeEventListener = function (name, listener) {\n      this.log('removeEventListener', name, listener);\n      this._events = this._events.filter(function (storedEvent) {\n        return storedEvent.name !== name && storedEvent.listener !== listener;\n      });\n    };\n    XMLHttpRequestOverride.prototype.overrideMimeType = function () {};\n    /**\n     * Resolves the response based on the `responseType` value.\n     */\n    XMLHttpRequestOverride.prototype.getResponseBody = function (body) {\n      // Handle an improperly set \"null\" value of the mocked response body.\n      var textBody = body !== null && body !== void 0 ? body : '';\n      this.log('coerced response body to', textBody);\n      switch (this.responseType) {\n        case 'json':\n          {\n            this.log('resolving response body as JSON');\n            return parseJson_1.parseJson(textBody);\n          }\n        case 'blob':\n          {\n            var blobType = this.getResponseHeader('content-type') || 'text/plain';\n            this.log('resolving response body as Blob', {\n              type: blobType\n            });\n            return new Blob([textBody], {\n              type: blobType\n            });\n          }\n        case 'arraybuffer':\n          {\n            this.log('resolving response body as ArrayBuffer');\n            var arrayBuffer = bufferFrom_1.bufferFrom(textBody);\n            return arrayBuffer;\n          }\n        default:\n          return textBody;\n      }\n    };\n    XMLHttpRequestOverride.prototype.getResponseXML = function () {\n      var contentType = this.getResponseHeader('Content-Type');\n      if (contentType === 'application/xml' || contentType === 'text/xml') {\n        return new xmldom_1.DOMParser().parseFromString(this.responseText, contentType);\n      }\n      return null;\n    };\n    /**\n     * Propagates mock XMLHttpRequest instance callbacks\n     * to the given XMLHttpRequest instance.\n     */\n    XMLHttpRequestOverride.prototype.propagateCallbacks = function (request) {\n      var e_2, _a;\n      this.log('propagating request callbacks to the original request');\n      var callbackNames = ['abort', 'onerror', 'ontimeout', 'onload', 'onloadstart', 'onloadend', 'onprogress', 'onreadystatechange'];\n      try {\n        for (var callbackNames_1 = __values(callbackNames), callbackNames_1_1 = callbackNames_1.next(); !callbackNames_1_1.done; callbackNames_1_1 = callbackNames_1.next()) {\n          var callbackName = callbackNames_1_1.value;\n          var callback = this[callbackName];\n          if (callback) {\n            request[callbackName] = this[callbackName];\n            this.log('propagated the \"%s\" callback', callbackName, callback);\n          }\n        }\n      } catch (e_2_1) {\n        e_2 = {\n          error: e_2_1\n        };\n      } finally {\n        try {\n          if (callbackNames_1_1 && !callbackNames_1_1.done && (_a = callbackNames_1.return)) _a.call(callbackNames_1);\n        } finally {\n          if (e_2) throw e_2.error;\n        }\n      }\n      request.onabort = this.abort;\n      request.onerror = this.onerror;\n      request.ontimeout = this.ontimeout;\n      request.onload = this.onload;\n      request.onloadstart = this.onloadstart;\n      request.onloadend = this.onloadend;\n      request.onprogress = this.onprogress;\n      request.onreadystatechange = this.onreadystatechange;\n    };\n    /**\n     * Propagates the mock XMLHttpRequest instance listeners\n     * to the given XMLHttpRequest instance.\n     */\n    XMLHttpRequestOverride.prototype.propagateListeners = function (request) {\n      this.log('propagating request listeners (%d) to the original request', this._events.length, this._events);\n      this._events.forEach(function (_a) {\n        var name = _a.name,\n          listener = _a.listener;\n        request.addEventListener(name, listener);\n      });\n    };\n    XMLHttpRequestOverride.prototype.propagateHeaders = function (request, headers) {\n      var _this = this;\n      this.log('propagating request headers to the original request', headers);\n      // Preserve the request headers casing.\n      Object.entries(headers.raw()).forEach(function (_a) {\n        var _b = __read(_a, 2),\n          name = _b[0],\n          value = _b[1];\n        _this.log('setting \"%s\" (%s) header on the original request', name, value);\n        request.setRequestHeader(name, value);\n      });\n    };\n    return XMLHttpRequestOverride;\n  }(), /* Request state */\n  _a.UNSENT = 0, _a.OPENED = 1, _a.HEADERS_RECEIVED = 2, _a.LOADING = 3, _a.DONE = 4, _a;\n};\nexports.createXMLHttpRequestOverride = createXMLHttpRequestOverride;\n//# sourceMappingURL=XMLHttpRequestOverride.js.map","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}