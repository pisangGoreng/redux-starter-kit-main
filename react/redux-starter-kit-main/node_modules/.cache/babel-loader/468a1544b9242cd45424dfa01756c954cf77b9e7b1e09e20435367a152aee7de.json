{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function () {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n};\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nexports.__esModule = true;\nexports.generateGraphQLHandlers = exports.generateGraphQLSchema = exports.definitionToFields = exports.getQueryTypeByValueType = exports.comparatorTypes = exports.getGraphQLType = void 0;\nvar pluralize_1 = __importDefault(require(\"pluralize\"));\nvar graphql_1 = require(\"graphql\");\nvar msw_1 = require(\"msw\");\nvar primaryKey_1 = require(\"../primaryKey\");\nvar capitalize_1 = require(\"../utils/capitalize\");\nvar boolean_1 = require(\"../comparators/boolean\");\nvar string_1 = require(\"../comparators/string\");\nvar number_1 = require(\"../comparators/number\");\n/**\n * Derive a GraphQL scalar type from a variable.\n */\nfunction getGraphQLType(value) {\n  var resolvedValue = typeof value === 'function' ? value() : value;\n  switch (resolvedValue.constructor.name) {\n    case 'Number':\n      return graphql_1.GraphQLInt;\n    case 'Boolean':\n      return graphql_1.GraphQLBoolean;\n    default:\n      return graphql_1.GraphQLString;\n  }\n}\nexports.getGraphQLType = getGraphQLType;\n/**\n * Create a GraphQLInputObjectType from a given comparator function.\n */\nfunction createComparatorGraphQLInputType(name, comparators, type) {\n  return new graphql_1.GraphQLInputObjectType({\n    name: name,\n    fields: Object.keys(comparators).reduce(function (fields, comparatorFn) {\n      var fieldType = ['between', 'notBetween', 'in', 'notIn'].includes(comparatorFn) ? graphql_1.GraphQLList(type) : type;\n      fields[comparatorFn] = {\n        type: fieldType\n      };\n      return fields;\n    }, {})\n  });\n}\nexports.comparatorTypes = {\n  IdQueryType: createComparatorGraphQLInputType('IdQueryType', string_1.stringComparators, graphql_1.GraphQLID),\n  StringQueryType: createComparatorGraphQLInputType('StringQueryType', string_1.stringComparators, graphql_1.GraphQLString),\n  IntQueryType: createComparatorGraphQLInputType('IntQueryType', number_1.numberComparators, graphql_1.GraphQLInt),\n  BooleanQueryType: createComparatorGraphQLInputType('BooleanQueryType', boolean_1.booleanComparators, graphql_1.GraphQLBoolean)\n};\nfunction getQueryTypeByValueType(valueType) {\n  switch (valueType.name) {\n    case 'ID':\n      return exports.comparatorTypes.IdQueryType;\n    case 'Int':\n      return exports.comparatorTypes.IntQueryType;\n    case 'Boolean':\n      return exports.comparatorTypes.BooleanQueryType;\n    default:\n      return exports.comparatorTypes.StringQueryType;\n  }\n}\nexports.getQueryTypeByValueType = getQueryTypeByValueType;\nfunction definitionToFields(definition) {\n  return Object.entries(definition).reduce(function (types, _a) {\n    var _b = __read(_a, 2),\n      key = _b[0],\n      value = _b[1];\n    var valueType = value instanceof primaryKey_1.PrimaryKey ? graphql_1.GraphQLID : getGraphQLType(value);\n    var queryType = getQueryTypeByValueType(valueType);\n    // Fields describe an entity type.\n    types.fields[key] = {\n      type: valueType\n    };\n    // Input fields describe a type that can be used\n    // as an input when creating entities (initial values).\n    types.inputFields[key] = {\n      type: valueType\n    };\n    // Query input fields describe a type that is used\n    // as a \"where\" query, with its comparator function types.\n    types.queryInputFields[key] = {\n      type: queryType\n    };\n    return types;\n  }, {\n    fields: {},\n    inputFields: {},\n    queryInputFields: {}\n  });\n}\nexports.definitionToFields = definitionToFields;\nfunction generateGraphQLSchema(modelName, definition, model) {\n  var _a, _b;\n  var pluralModelName = pluralize_1[\"default\"](modelName);\n  var capitalModelName = capitalize_1.capitalize(modelName);\n  var _c = definitionToFields(definition),\n    fields = _c.fields,\n    inputFields = _c.inputFields,\n    queryInputFields = _c.queryInputFields;\n  var EntityType = new graphql_1.GraphQLObjectType({\n    name: capitalModelName,\n    fields: fields\n  });\n  var EntityInputType = new graphql_1.GraphQLInputObjectType({\n    name: capitalModelName + \"Input\",\n    fields: inputFields\n  });\n  var EntityQueryInputType = new graphql_1.GraphQLInputObjectType({\n    name: capitalModelName + \"QueryInput\",\n    fields: queryInputFields\n  });\n  var paginationArgs = {\n    take: {\n      type: graphql_1.GraphQLInt\n    },\n    skip: {\n      type: graphql_1.GraphQLInt\n    },\n    cursor: {\n      type: graphql_1.GraphQLID\n    }\n  };\n  var objectSchema = new graphql_1.GraphQLSchema({\n    query: new graphql_1.GraphQLObjectType({\n      name: 'Query',\n      fields: (_a = {},\n      // Get an entity by the primary key.\n      _a[modelName] = {\n        type: EntityType,\n        args: {\n          where: {\n            type: EntityQueryInputType\n          }\n        },\n        resolve: function (_, args) {\n          return model.findFirst({\n            where: args.where\n          });\n        }\n      },\n      // Get all entities.\n      _a[pluralModelName] = {\n        type: new graphql_1.GraphQLList(EntityType),\n        args: __assign(__assign({}, paginationArgs), {\n          where: {\n            type: EntityQueryInputType\n          }\n        }),\n        resolve: function (_, args) {\n          var shouldQuery = Object.keys(args).length > 0;\n          return shouldQuery ? model.findMany({\n            where: args.where,\n            skip: args.skip,\n            take: args.take,\n            cursor: args.cursor\n          }) : model.getAll();\n        }\n      }, _a)\n    }),\n    mutation: new graphql_1.GraphQLObjectType({\n      name: 'Mutation',\n      fields: (_b = {},\n      // Create a new entity.\n      _b[\"create\" + capitalModelName] = {\n        type: EntityType,\n        args: {\n          data: {\n            type: EntityInputType\n          }\n        },\n        resolve: function (_, args) {\n          return model.create(args.data);\n        }\n      },\n      // Update an single entity.\n      _b[\"update\" + capitalModelName] = {\n        type: EntityType,\n        args: {\n          where: {\n            type: EntityQueryInputType\n          },\n          data: {\n            type: EntityInputType\n          }\n        },\n        resolve: function (_, args) {\n          return model.update({\n            where: args.where,\n            data: args.data\n          });\n        }\n      },\n      // Update multiple existing entities.\n      _b[\"update\" + capitalize_1.capitalize(pluralModelName)] = {\n        type: new graphql_1.GraphQLList(EntityType),\n        args: {\n          where: {\n            type: EntityQueryInputType\n          },\n          data: {\n            type: EntityInputType\n          }\n        },\n        resolve: function (_, args) {\n          return model.updateMany({\n            where: args.where,\n            data: args.data\n          });\n        }\n      },\n      // Delete a single entity.\n      _b[\"delete\" + capitalModelName] = {\n        type: EntityType,\n        args: {\n          where: {\n            type: EntityQueryInputType\n          }\n        },\n        resolve: function (_, args) {\n          return model[\"delete\"]({\n            where: args.where\n          });\n        }\n      },\n      // Delete multiple entities.\n      _b[\"delete\" + capitalize_1.capitalize(pluralModelName)] = {\n        type: new graphql_1.GraphQLList(EntityType),\n        args: {\n          where: {\n            type: EntityQueryInputType\n          }\n        },\n        resolve: function (_, args) {\n          return model.deleteMany({\n            where: args.where\n          });\n        }\n      }, _b)\n    })\n  });\n  return objectSchema;\n}\nexports.generateGraphQLSchema = generateGraphQLSchema;\nfunction generateGraphQLHandlers(modelName, definition, model, baseUrl) {\n  var _this = this;\n  if (baseUrl === void 0) {\n    baseUrl = '';\n  }\n  var target = baseUrl ? msw_1.graphql.link(baseUrl) : msw_1.graphql;\n  var objectSchema = generateGraphQLSchema(modelName, definition, model);\n  return [target.operation(function (req, res, ctx) {\n    return __awaiter(_this, void 0, void 0, function () {\n      var result;\n      var _a;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            if (!req.body) {\n              return [2 /*return*/];\n            }\n\n            return [4 /*yield*/, graphql_1.graphql({\n              schema: objectSchema,\n              source: (_a = req.body) === null || _a === void 0 ? void 0 : _a.query,\n              variableValues: req.variables\n            })];\n          case 1:\n            result = _b.sent();\n            return [2 /*return*/, res(ctx.data(result.data), ctx.errors(result.errors))];\n        }\n      });\n    });\n  })];\n}\nexports.generateGraphQLHandlers = generateGraphQLHandlers;","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}