{"ast":null,"code":"var statuses = {\n  \"100\": \"Continue\",\n  \"101\": \"Switching Protocols\",\n  \"102\": \"Processing\",\n  \"103\": \"Early Hints\",\n  \"200\": \"OK\",\n  \"201\": \"Created\",\n  \"202\": \"Accepted\",\n  \"203\": \"Non-Authoritative Information\",\n  \"204\": \"No Content\",\n  \"205\": \"Reset Content\",\n  \"206\": \"Partial Content\",\n  \"207\": \"Multi-Status\",\n  \"208\": \"Already Reported\",\n  \"226\": \"IM Used\",\n  \"300\": \"Multiple Choices\",\n  \"301\": \"Moved Permanently\",\n  \"302\": \"Found\",\n  \"303\": \"See Other\",\n  \"304\": \"Not Modified\",\n  \"305\": \"Use Proxy\",\n  \"307\": \"Temporary Redirect\",\n  \"308\": \"Permanent Redirect\",\n  \"400\": \"Bad Request\",\n  \"401\": \"Unauthorized\",\n  \"402\": \"Payment Required\",\n  \"403\": \"Forbidden\",\n  \"404\": \"Not Found\",\n  \"405\": \"Method Not Allowed\",\n  \"406\": \"Not Acceptable\",\n  \"407\": \"Proxy Authentication Required\",\n  \"408\": \"Request Timeout\",\n  \"409\": \"Conflict\",\n  \"410\": \"Gone\",\n  \"411\": \"Length Required\",\n  \"412\": \"Precondition Failed\",\n  \"413\": \"Payload Too Large\",\n  \"414\": \"URI Too Long\",\n  \"415\": \"Unsupported Media Type\",\n  \"416\": \"Range Not Satisfiable\",\n  \"417\": \"Expectation Failed\",\n  \"418\": \"I'm a Teapot\",\n  \"421\": \"Misdirected Request\",\n  \"422\": \"Unprocessable Entity\",\n  \"423\": \"Locked\",\n  \"424\": \"Failed Dependency\",\n  \"425\": \"Too Early\",\n  \"426\": \"Upgrade Required\",\n  \"428\": \"Precondition Required\",\n  \"429\": \"Too Many Requests\",\n  \"431\": \"Request Header Fields Too Large\",\n  \"451\": \"Unavailable For Legal Reasons\",\n  \"500\": \"Internal Server Error\",\n  \"501\": \"Not Implemented\",\n  \"502\": \"Bad Gateway\",\n  \"503\": \"Service Unavailable\",\n  \"504\": \"Gateway Timeout\",\n  \"505\": \"HTTP Version Not Supported\",\n  \"506\": \"Variant Also Negotiates\",\n  \"507\": \"Insufficient Storage\",\n  \"508\": \"Loop Detected\",\n  \"509\": \"Bandwidth Limit Exceeded\",\n  \"510\": \"Not Extended\",\n  \"511\": \"Network Authentication Required\"\n};\n\n/**\r\n * Sets a response status code and text.\r\n * @example\r\n * res(ctx.status(301))\r\n * res(ctx.status(400, 'Custom status text'))\r\n * @see {@link https://mswjs.io/docs/api/context/status `ctx.status()`}\r\n */\nconst status = (statusCode, statusText) => {\n  return res => {\n    res.status = statusCode;\n    res.statusText = statusText || statuses[String(statusCode)];\n    return res;\n  };\n};\nvar commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};\nvar lib$1 = {};\nvar Headers = {};\nvar normalizeHeaderName$1 = {};\nObject.defineProperty(normalizeHeaderName$1, \"__esModule\", {\n  value: true\n});\nnormalizeHeaderName$1.normalizeHeaderName = void 0;\nvar HEADERS_INVALID_CHARACTERS = /[^a-z0-9\\-#$%&'*+.^_`|~]/i;\nfunction normalizeHeaderName(name) {\n  if (typeof name !== 'string') {\n    name = String(name);\n  }\n  if (HEADERS_INVALID_CHARACTERS.test(name) || name.trim() === '') {\n    throw new TypeError('Invalid character in header field name');\n  }\n  return name.toLowerCase();\n}\nnormalizeHeaderName$1.normalizeHeaderName = normalizeHeaderName;\nvar normalizeHeaderValue$1 = {};\nObject.defineProperty(normalizeHeaderValue$1, \"__esModule\", {\n  value: true\n});\nnormalizeHeaderValue$1.normalizeHeaderValue = void 0;\nfunction normalizeHeaderValue(value) {\n  if (typeof value !== 'string') {\n    value = String(value);\n  }\n  return value;\n}\nnormalizeHeaderValue$1.normalizeHeaderValue = normalizeHeaderValue;\nvar __generator = commonjsGlobal && commonjsGlobal.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function () {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nvar __read$3 = commonjsGlobal && commonjsGlobal.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n};\nvar __values = commonjsGlobal && commonjsGlobal.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n    m = s && o[s],\n    i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nObject.defineProperty(Headers, \"__esModule\", {\n  value: true\n});\nvar normalizeHeaderName_1 = normalizeHeaderName$1;\nvar normalizeHeaderValue_1 = normalizeHeaderValue$1;\nvar HeadersPolyfill = /** @class */function () {\n  function HeadersPolyfill(init) {\n    var _this = this;\n    // Normalized header {\"name\":\"a, b\"} storage.\n    this._headers = {};\n    // Keeps the mapping between the raw header name\n    // and the normalized header name to ease the lookup.\n    this._names = new Map();\n    /**\n     * @note Cannot check if the `init` is an instance of the `Headers`\n     * because that class is only defined in the browser.\n     */\n    if (['Headers', 'HeadersPolyfill'].includes(init === null || init === void 0 ? void 0 : init.constructor.name) || init instanceof HeadersPolyfill) {\n      var initialHeaders = init;\n      initialHeaders.forEach(function (value, name) {\n        _this.append(name, value);\n      }, this);\n    } else if (Array.isArray(init)) {\n      init.forEach(function (_a) {\n        var _b = __read$3(_a, 2),\n          name = _b[0],\n          value = _b[1];\n        _this.append(name, Array.isArray(value) ? value.join(', ') : value);\n      });\n    } else if (init) {\n      Object.getOwnPropertyNames(init).forEach(function (name) {\n        var value = init[name];\n        _this.append(name, Array.isArray(value) ? value.join(', ') : value);\n      });\n    }\n  }\n  HeadersPolyfill.prototype[Symbol.iterator] = function () {\n    return this.entries();\n  };\n  HeadersPolyfill.prototype.keys = function () {\n    var _a, _b, name_1, e_1_1;\n    var e_1, _c;\n    return __generator(this, function (_d) {\n      switch (_d.label) {\n        case 0:\n          _d.trys.push([0, 5, 6, 7]);\n          _a = __values(Object.keys(this._headers)), _b = _a.next();\n          _d.label = 1;\n        case 1:\n          if (!!_b.done) return [3 /*break*/, 4];\n          name_1 = _b.value;\n          return [4 /*yield*/, name_1];\n        case 2:\n          _d.sent();\n          _d.label = 3;\n        case 3:\n          _b = _a.next();\n          return [3 /*break*/, 1];\n        case 4:\n          return [3 /*break*/, 7];\n        case 5:\n          e_1_1 = _d.sent();\n          e_1 = {\n            error: e_1_1\n          };\n          return [3 /*break*/, 7];\n        case 6:\n          try {\n            if (_b && !_b.done && (_c = _a.return)) _c.call(_a);\n          } finally {\n            if (e_1) throw e_1.error;\n          }\n          return [7 /*endfinally*/];\n        case 7:\n          return [2 /*return*/];\n      }\n    });\n  };\n\n  HeadersPolyfill.prototype.values = function () {\n    var _a, _b, value, e_2_1;\n    var e_2, _c;\n    return __generator(this, function (_d) {\n      switch (_d.label) {\n        case 0:\n          _d.trys.push([0, 5, 6, 7]);\n          _a = __values(Object.values(this._headers)), _b = _a.next();\n          _d.label = 1;\n        case 1:\n          if (!!_b.done) return [3 /*break*/, 4];\n          value = _b.value;\n          return [4 /*yield*/, value];\n        case 2:\n          _d.sent();\n          _d.label = 3;\n        case 3:\n          _b = _a.next();\n          return [3 /*break*/, 1];\n        case 4:\n          return [3 /*break*/, 7];\n        case 5:\n          e_2_1 = _d.sent();\n          e_2 = {\n            error: e_2_1\n          };\n          return [3 /*break*/, 7];\n        case 6:\n          try {\n            if (_b && !_b.done && (_c = _a.return)) _c.call(_a);\n          } finally {\n            if (e_2) throw e_2.error;\n          }\n          return [7 /*endfinally*/];\n        case 7:\n          return [2 /*return*/];\n      }\n    });\n  };\n\n  HeadersPolyfill.prototype.entries = function () {\n    var _a, _b, name_2, e_3_1;\n    var e_3, _c;\n    return __generator(this, function (_d) {\n      switch (_d.label) {\n        case 0:\n          _d.trys.push([0, 5, 6, 7]);\n          _a = __values(Object.keys(this._headers)), _b = _a.next();\n          _d.label = 1;\n        case 1:\n          if (!!_b.done) return [3 /*break*/, 4];\n          name_2 = _b.value;\n          return [4 /*yield*/, [name_2, this.get(name_2)]];\n        case 2:\n          _d.sent();\n          _d.label = 3;\n        case 3:\n          _b = _a.next();\n          return [3 /*break*/, 1];\n        case 4:\n          return [3 /*break*/, 7];\n        case 5:\n          e_3_1 = _d.sent();\n          e_3 = {\n            error: e_3_1\n          };\n          return [3 /*break*/, 7];\n        case 6:\n          try {\n            if (_b && !_b.done && (_c = _a.return)) _c.call(_a);\n          } finally {\n            if (e_3) throw e_3.error;\n          }\n          return [7 /*endfinally*/];\n        case 7:\n          return [2 /*return*/];\n      }\n    });\n  };\n  /**\n   * Returns a `ByteString` sequence of all the values of a header with a given name.\n   */\n  HeadersPolyfill.prototype.get = function (name) {\n    return this._headers[normalizeHeaderName_1.normalizeHeaderName(name)] || null;\n  };\n  /**\n   * Sets a new value for an existing header inside a `Headers` object, or adds the header if it does not already exist.\n   */\n  HeadersPolyfill.prototype.set = function (name, value) {\n    var normalizedName = normalizeHeaderName_1.normalizeHeaderName(name);\n    this._headers[normalizedName] = normalizeHeaderValue_1.normalizeHeaderValue(value);\n    this._names.set(normalizedName, name);\n  };\n  /**\n   * Appends a new value onto an existing header inside a `Headers` object, or adds the header if it does not already exist.\n   */\n  HeadersPolyfill.prototype.append = function (name, value) {\n    var resolvedValue = this.has(name) ? this.get(name) + \", \" + value : value;\n    this.set(name, resolvedValue);\n  };\n  /**\n   * Deletes a header from the `Headers` object.\n   */\n  HeadersPolyfill.prototype.delete = function (name) {\n    if (!this.has(name)) {\n      return this;\n    }\n    var normalizedName = normalizeHeaderName_1.normalizeHeaderName(name);\n    delete this._headers[normalizedName];\n    this._names.delete(normalizedName);\n    return this;\n  };\n  /**\n   * Returns the object of all the normalized headers.\n   */\n  HeadersPolyfill.prototype.all = function () {\n    return this._headers;\n  };\n  /**\n   * Returns the object of all the raw headers.\n   */\n  HeadersPolyfill.prototype.raw = function () {\n    var _this = this;\n    return Object.entries(this._headers).reduce(function (headers, _a) {\n      var _b = __read$3(_a, 2),\n        name = _b[0],\n        value = _b[1];\n      headers[_this._names.get(name)] = value;\n      return headers;\n    }, {});\n  };\n  /**\n   * Returns a boolean stating whether a `Headers` object contains a certain header.\n   */\n  HeadersPolyfill.prototype.has = function (name) {\n    return this._headers.hasOwnProperty(normalizeHeaderName_1.normalizeHeaderName(name));\n  };\n  /**\n   * Traverses the `Headers` object,\n   * calling the given callback for each header.\n   */\n  HeadersPolyfill.prototype.forEach = function (callback, thisArg) {\n    for (var name_3 in this._headers) {\n      if (this._headers.hasOwnProperty(name_3)) {\n        callback.call(thisArg, this._headers[name_3], name_3, this);\n      }\n    }\n  };\n  return HeadersPolyfill;\n}();\nHeaders.default = HeadersPolyfill;\nvar headersToString$1 = {};\nvar headersToList$1 = {};\nObject.defineProperty(headersToList$1, \"__esModule\", {\n  value: true\n});\nheadersToList$1.headersToList = void 0;\nfunction headersToList(headers) {\n  var headersList = [];\n  headers.forEach(function (value, name) {\n    var resolvedValue = value.includes(',') ? value.split(',').map(function (value) {\n      return value.trim();\n    }) : value;\n    headersList.push([name, resolvedValue]);\n  });\n  return headersList;\n}\nheadersToList$1.headersToList = headersToList;\nvar __read$2 = commonjsGlobal && commonjsGlobal.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n};\nObject.defineProperty(headersToString$1, \"__esModule\", {\n  value: true\n});\nheadersToString$1.headersToString = void 0;\nvar headersToList_1 = headersToList$1;\n/**\n * Converts a given `Headers` instance to its string representation.\n */\nfunction headersToString(headers) {\n  var list = headersToList_1.headersToList(headers);\n  var lines = list.map(function (_a) {\n    var _b = __read$2(_a, 2),\n      name = _b[0],\n      value = _b[1];\n    var values = [].concat(value);\n    return name + \": \" + values.join(', ');\n  });\n  return lines.join('\\r\\n');\n}\nheadersToString$1.headersToString = headersToString;\nvar headersToObject$1 = {};\nObject.defineProperty(headersToObject$1, \"__esModule\", {\n  value: true\n});\nheadersToObject$1.headersToObject = void 0;\n// List of headers that cannot have multiple values,\n// while potentially having a comma in their single value.\nvar singleValueHeaders = ['user-agent'];\n/**\n * Converts a given `Headers` instance into a plain object.\n * Respects headers with multiple values.\n */\nfunction headersToObject(headers) {\n  var headersObject = {};\n  headers.forEach(function (value, name) {\n    var isMultiValue = !singleValueHeaders.includes(name.toLowerCase()) && value.includes(',');\n    headersObject[name] = isMultiValue ? value.split(',').map(function (s) {\n      return s.trim();\n    }) : value;\n  });\n  return headersObject;\n}\nheadersToObject$1.headersToObject = headersToObject;\nvar stringToHeaders$1 = {};\nObject.defineProperty(stringToHeaders$1, \"__esModule\", {\n  value: true\n});\nstringToHeaders$1.stringToHeaders = void 0;\nvar Headers_1$2 = Headers;\n/**\n * Converts a string representation of headers (i.e. from XMLHttpRequest)\n * to a new `Headers` instance.\n */\nfunction stringToHeaders(str) {\n  var lines = str.trim().split(/[\\r\\n]+/);\n  return lines.reduce(function (headers, line) {\n    var parts = line.split(': ');\n    var name = parts.shift();\n    var value = parts.join(': ');\n    headers.append(name, value);\n    return headers;\n  }, new Headers_1$2.default());\n}\nstringToHeaders$1.stringToHeaders = stringToHeaders;\nvar listToHeaders$1 = {};\nvar __read$1 = commonjsGlobal && commonjsGlobal.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n};\nObject.defineProperty(listToHeaders$1, \"__esModule\", {\n  value: true\n});\nlistToHeaders$1.listToHeaders = void 0;\nvar Headers_1$1 = Headers;\nfunction listToHeaders(list) {\n  var headers = new Headers_1$1.default();\n  list.forEach(function (_a) {\n    var _b = __read$1(_a, 2),\n      name = _b[0],\n      value = _b[1];\n    var values = [].concat(value);\n    values.forEach(function (value) {\n      headers.append(name, value);\n    });\n  });\n  return headers;\n}\nlistToHeaders$1.listToHeaders = listToHeaders;\nvar objectToHeaders$1 = {};\nvar reduceHeadersObject$1 = {};\nObject.defineProperty(reduceHeadersObject$1, \"__esModule\", {\n  value: true\n});\nreduceHeadersObject$1.reduceHeadersObject = void 0;\n/**\n * Reduces given headers object instnace.\n */\nfunction reduceHeadersObject(headers, reducer, initialState) {\n  return Object.keys(headers).reduce(function (nextHeaders, name) {\n    return reducer(nextHeaders, name, headers[name]);\n  }, initialState);\n}\nreduceHeadersObject$1.reduceHeadersObject = reduceHeadersObject;\nObject.defineProperty(objectToHeaders$1, \"__esModule\", {\n  value: true\n});\nobjectToHeaders$1.objectToHeaders = void 0;\nvar Headers_1 = Headers;\nvar reduceHeadersObject_1$1 = reduceHeadersObject$1;\n/**\n * Converts a given headers object to a new `Headers` instance.\n */\nfunction objectToHeaders(headersObject) {\n  return reduceHeadersObject_1$1.reduceHeadersObject(headersObject, function (headers, name, value) {\n    var values = [].concat(value).filter(Boolean);\n    values.forEach(function (value) {\n      headers.append(name, value);\n    });\n    return headers;\n  }, new Headers_1.default());\n}\nobjectToHeaders$1.objectToHeaders = objectToHeaders;\nvar flattenHeadersList$1 = {};\nvar __read = commonjsGlobal && commonjsGlobal.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n};\nObject.defineProperty(flattenHeadersList$1, \"__esModule\", {\n  value: true\n});\nflattenHeadersList$1.flattenHeadersList = void 0;\nfunction flattenHeadersList(list) {\n  return list.map(function (_a) {\n    var _b = __read(_a, 2),\n      name = _b[0],\n      values = _b[1];\n    return [name, [].concat(values).join('; ')];\n  });\n}\nflattenHeadersList$1.flattenHeadersList = flattenHeadersList;\nvar flattenHeadersObject$1 = {};\nObject.defineProperty(flattenHeadersObject$1, \"__esModule\", {\n  value: true\n});\nflattenHeadersObject$1.flattenHeadersObject = void 0;\nvar reduceHeadersObject_1 = reduceHeadersObject$1;\nfunction flattenHeadersObject(headersObject) {\n  return reduceHeadersObject_1.reduceHeadersObject(headersObject, function (headers, name, value) {\n    headers[name] = [].concat(value).join('; ');\n    return headers;\n  }, {});\n}\nflattenHeadersObject$1.flattenHeadersObject = flattenHeadersObject;\n(function (exports) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.flattenHeadersObject = exports.flattenHeadersList = exports.reduceHeadersObject = exports.objectToHeaders = exports.listToHeaders = exports.stringToHeaders = exports.headersToObject = exports.headersToList = exports.headersToString = exports.Headers = void 0;\n  var Headers_1 = Headers;\n  Object.defineProperty(exports, \"Headers\", {\n    enumerable: true,\n    get: function () {\n      return Headers_1.default;\n    }\n  });\n  var headersToString_1 = headersToString$1;\n  Object.defineProperty(exports, \"headersToString\", {\n    enumerable: true,\n    get: function () {\n      return headersToString_1.headersToString;\n    }\n  });\n  var headersToList_1 = headersToList$1;\n  Object.defineProperty(exports, \"headersToList\", {\n    enumerable: true,\n    get: function () {\n      return headersToList_1.headersToList;\n    }\n  });\n  var headersToObject_1 = headersToObject$1;\n  Object.defineProperty(exports, \"headersToObject\", {\n    enumerable: true,\n    get: function () {\n      return headersToObject_1.headersToObject;\n    }\n  });\n  var stringToHeaders_1 = stringToHeaders$1;\n  Object.defineProperty(exports, \"stringToHeaders\", {\n    enumerable: true,\n    get: function () {\n      return stringToHeaders_1.stringToHeaders;\n    }\n  });\n  var listToHeaders_1 = listToHeaders$1;\n  Object.defineProperty(exports, \"listToHeaders\", {\n    enumerable: true,\n    get: function () {\n      return listToHeaders_1.listToHeaders;\n    }\n  });\n  var objectToHeaders_1 = objectToHeaders$1;\n  Object.defineProperty(exports, \"objectToHeaders\", {\n    enumerable: true,\n    get: function () {\n      return objectToHeaders_1.objectToHeaders;\n    }\n  });\n  var reduceHeadersObject_1 = reduceHeadersObject$1;\n  Object.defineProperty(exports, \"reduceHeadersObject\", {\n    enumerable: true,\n    get: function () {\n      return reduceHeadersObject_1.reduceHeadersObject;\n    }\n  });\n  var flattenHeadersList_1 = flattenHeadersList$1;\n  Object.defineProperty(exports, \"flattenHeadersList\", {\n    enumerable: true,\n    get: function () {\n      return flattenHeadersList_1.flattenHeadersList;\n    }\n  });\n  var flattenHeadersObject_1 = flattenHeadersObject$1;\n  Object.defineProperty(exports, \"flattenHeadersObject\", {\n    enumerable: true,\n    get: function () {\n      return flattenHeadersObject_1.flattenHeadersObject;\n    }\n  });\n})(lib$1);\n\n/**\r\n * Sets one or multiple response headers.\r\n * @example\r\n * ctx.set('Content-Type', 'text/plain')\r\n * ctx.set({\r\n *   'Accept': 'application/javascript',\r\n *   'Content-Type': \"text/plain\"\r\n * })\r\n * @see {@link https://mswjs.io/docs/api/context/set `ctx.set()`}\r\n */\nfunction set() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n  return res => {\n    const [name, value] = args;\n    if (typeof name === 'string') {\n      res.headers.append(name, value);\n    } else {\n      const headers = lib$1.objectToHeaders(name);\n      headers.forEach((value, name) => {\n        res.headers.append(name, value);\n      });\n    }\n    return res;\n  };\n}\n\n/*!\n * cookie\n * Copyright(c) 2012-2014 Roman Shtylman\n * Copyright(c) 2015 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n/**\n * Module exports.\n * @public\n */\n\nvar parse_1 = parse;\nvar serialize_1 = serialize;\n\n/**\n * Module variables.\n * @private\n */\n\nvar decode = decodeURIComponent;\nvar encode = encodeURIComponent;\nvar pairSplitRegExp = /; */;\n\n/**\n * RegExp to match field-content in RFC 7230 sec 3.2\n *\n * field-content = field-vchar [ 1*( SP / HTAB ) field-vchar ]\n * field-vchar   = VCHAR / obs-text\n * obs-text      = %x80-FF\n */\n\nvar fieldContentRegExp = /^[\\u0009\\u0020-\\u007e\\u0080-\\u00ff]+$/;\n\n/**\n * Parse a cookie header.\n *\n * Parse the given cookie header string into an object\n * The object has the various cookies as keys(names) => values\n *\n * @param {string} str\n * @param {object} [options]\n * @return {object}\n * @public\n */\n\nfunction parse(str, options) {\n  if (typeof str !== 'string') {\n    throw new TypeError('argument str must be a string');\n  }\n  var obj = {};\n  var opt = options || {};\n  var pairs = str.split(pairSplitRegExp);\n  var dec = opt.decode || decode;\n  for (var i = 0; i < pairs.length; i++) {\n    var pair = pairs[i];\n    var eq_idx = pair.indexOf('=');\n\n    // skip things that don't look like key=value\n    if (eq_idx < 0) {\n      continue;\n    }\n    var key = pair.substr(0, eq_idx).trim();\n    var val = pair.substr(++eq_idx, pair.length).trim();\n\n    // quoted values\n    if ('\"' == val[0]) {\n      val = val.slice(1, -1);\n    }\n\n    // only assign once\n    if (undefined == obj[key]) {\n      obj[key] = tryDecode(val, dec);\n    }\n  }\n  return obj;\n}\n\n/**\n * Serialize data into a cookie header.\n *\n * Serialize the a name value pair into a cookie string suitable for\n * http headers. An optional options object specified cookie parameters.\n *\n * serialize('foo', 'bar', { httpOnly: true })\n *   => \"foo=bar; httpOnly\"\n *\n * @param {string} name\n * @param {string} val\n * @param {object} [options]\n * @return {string}\n * @public\n */\n\nfunction serialize(name, val, options) {\n  var opt = options || {};\n  var enc = opt.encode || encode;\n  if (typeof enc !== 'function') {\n    throw new TypeError('option encode is invalid');\n  }\n  if (!fieldContentRegExp.test(name)) {\n    throw new TypeError('argument name is invalid');\n  }\n  var value = enc(val);\n  if (value && !fieldContentRegExp.test(value)) {\n    throw new TypeError('argument val is invalid');\n  }\n  var str = name + '=' + value;\n  if (null != opt.maxAge) {\n    var maxAge = opt.maxAge - 0;\n    if (isNaN(maxAge) || !isFinite(maxAge)) {\n      throw new TypeError('option maxAge is invalid');\n    }\n    str += '; Max-Age=' + Math.floor(maxAge);\n  }\n  if (opt.domain) {\n    if (!fieldContentRegExp.test(opt.domain)) {\n      throw new TypeError('option domain is invalid');\n    }\n    str += '; Domain=' + opt.domain;\n  }\n  if (opt.path) {\n    if (!fieldContentRegExp.test(opt.path)) {\n      throw new TypeError('option path is invalid');\n    }\n    str += '; Path=' + opt.path;\n  }\n  if (opt.expires) {\n    if (typeof opt.expires.toUTCString !== 'function') {\n      throw new TypeError('option expires is invalid');\n    }\n    str += '; Expires=' + opt.expires.toUTCString();\n  }\n  if (opt.httpOnly) {\n    str += '; HttpOnly';\n  }\n  if (opt.secure) {\n    str += '; Secure';\n  }\n  if (opt.sameSite) {\n    var sameSite = typeof opt.sameSite === 'string' ? opt.sameSite.toLowerCase() : opt.sameSite;\n    switch (sameSite) {\n      case true:\n        str += '; SameSite=Strict';\n        break;\n      case 'lax':\n        str += '; SameSite=Lax';\n        break;\n      case 'strict':\n        str += '; SameSite=Strict';\n        break;\n      case 'none':\n        str += '; SameSite=None';\n        break;\n      default:\n        throw new TypeError('option sameSite is invalid');\n    }\n  }\n  return str;\n}\n\n/**\n * Try decoding a string using a decoding function.\n *\n * @param {string} str\n * @param {function} decode\n * @private\n */\n\nfunction tryDecode(str, decode) {\n  try {\n    return decode(str);\n  } catch (e) {\n    return str;\n  }\n}\n\n/**\r\n * Sets a given cookie on the mocked response.\r\n * @example res(ctx.cookie('name', 'value'))\r\n */\nconst cookie = (name, value, options) => {\n  return res => {\n    const serializedCookie = serialize_1(name, value, options);\n    res.headers.set('Set-Cookie', serializedCookie);\n    if (typeof document !== 'undefined') {\n      document.cookie = serializedCookie;\n    }\n    return res;\n  };\n};\n\n/**\r\n * Parses a given value into a JSON.\r\n * Does not throw an exception on an invalid JSON string.\r\n */\nfunction jsonParse(value) {\n  try {\n    return JSON.parse(value);\n  } catch (error) {\n    return undefined;\n  }\n}\n\n/**\r\n * Sets the given value as the JSON body of the response.\r\n * Appends a `Content-Type: application/json` header on the\r\n * mocked response.\r\n * @example\r\n * res(ctx.json('Some string'))\r\n * res(ctx.json({ key: 'value' }))\r\n * res(ctx.json([1, '2', false, { ok: true }]))\r\n * @see {@link https://mswjs.io/docs/api/context/json `ctx.json()`}\r\n */\nconst json = body => {\n  return res => {\n    res.headers.set('Content-Type', 'application/json');\n    res.body = JSON.stringify(body);\n    return res;\n  };\n};\nvar lib = {\n  exports: {}\n};\n(function (module, exports) {\n  (function (global, factory) {\n    factory(exports);\n  })(commonjsGlobal, function (exports) {\n    /**\r\n     * Determines if the current process is a Node.js process.\r\n     */\n    function isNodeProcess() {\n      if (typeof navigator !== 'undefined' && navigator.product === 'ReactNative') {\n        return true;\n      }\n      return !!(typeof process !== 'undefined' && process.versions && process.versions.node);\n    }\n    exports.isNodeProcess = isNodeProcess;\n    Object.defineProperty(exports, '__esModule', {\n      value: true\n    });\n  });\n})(lib, lib.exports);\nconst SET_TIMEOUT_MAX_ALLOWED_INT = 2147483647;\nconst MIN_SERVER_RESPONSE_TIME = 100;\nconst MAX_SERVER_RESPONSE_TIME = 400;\nconst NODE_SERVER_RESPONSE_TIME = 5;\nconst getRandomServerResponseTime = () => {\n  if (lib.exports.isNodeProcess()) {\n    return NODE_SERVER_RESPONSE_TIME;\n  }\n  return Math.floor(Math.random() * (MAX_SERVER_RESPONSE_TIME - MIN_SERVER_RESPONSE_TIME) + MIN_SERVER_RESPONSE_TIME);\n};\n/**\r\n * Delays the response by the given duration (ms).\r\n * @example\r\n * res(ctx.delay(1200)) // delay response by 1200ms\r\n * res(ctx.delay()) // emulate realistic server response time\r\n * res(ctx.delay('infinite')) // delay response infinitely\r\n * @see {@link https://mswjs.io/docs/api/context/delay `ctx.delay()`}\r\n */\nconst delay = durationOrMode => {\n  return res => {\n    let delayTime;\n    if (typeof durationOrMode === 'string') {\n      switch (durationOrMode) {\n        case 'infinite':\n          {\n            // Using `Infinity` as a delay value executes the response timeout immediately.\n            // Instead, use the maximum allowed integer for `setTimeout`.\n            delayTime = SET_TIMEOUT_MAX_ALLOWED_INT;\n            break;\n          }\n        case 'real':\n          {\n            delayTime = getRandomServerResponseTime();\n            break;\n          }\n        default:\n          {\n            throw new Error(`Failed to delay a response: unknown delay mode \"${durationOrMode}\". Please make sure you provide one of the supported modes (\"real\", \"infinite\") or a number to \"ctx.delay\".`);\n          }\n      }\n    } else if (typeof durationOrMode === 'undefined') {\n      // Use random realistic server response time when no explicit delay duration was provided.\n      delayTime = getRandomServerResponseTime();\n    } else {\n      // Guard against passing values like `Infinity` or `Number.MAX_VALUE`\n      // as the response delay duration. They don't produce the result you may expect.\n      if (durationOrMode > SET_TIMEOUT_MAX_ALLOWED_INT) {\n        throw new Error(`Failed to delay a response: provided delay duration (${durationOrMode}) exceeds the maximum allowed duration for \"setTimeout\" (${SET_TIMEOUT_MAX_ALLOWED_INT}). This will cause the response to be returned immediately. Please use a number within the allowed range to delay the response by exact duration, or consider the \"infinite\" delay mode to delay the response indefinitely.`);\n      }\n      delayTime = durationOrMode;\n    }\n    res.delay = delayTime;\n    return res;\n  };\n};\nconst useFetch = lib.exports.isNodeProcess() ? require('node-fetch') : window.fetch;\nconst augmentRequestInit = requestInit => {\n  const headers = new lib$1.Headers(requestInit.headers);\n  headers.set('x-msw-bypass', 'true');\n  return Object.assign(Object.assign({}, requestInit), {\n    headers: headers.all()\n  });\n};\nconst createFetchRequestParameters = input => {\n  const {\n    body,\n    method\n  } = input;\n  const requestParameters = Object.assign(Object.assign({}, input), {\n    body: undefined\n  });\n  if (['GET', 'HEAD'].includes(method)) {\n    return requestParameters;\n  }\n  if (typeof body === 'object' || typeof body === 'number' || typeof body === 'boolean') {\n    requestParameters.body = JSON.stringify(body);\n  } else {\n    requestParameters.body = body;\n  }\n  return requestParameters;\n};\n/**\r\n * Performs a bypassed request inside a request handler.\r\n * @example\r\n * const originalResponse = await ctx.fetch(req)\r\n * @see {@link https://mswjs.io/docs/api/context/fetch `ctx.fetch()`}\r\n */\nconst fetch = function (input) {\n  let requestInit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  if (typeof input === 'string') {\n    return useFetch(input, augmentRequestInit(requestInit));\n  }\n  const requestParameters = createFetchRequestParameters(input);\n  const derivedRequestInit = augmentRequestInit(requestParameters);\n  return useFetch(input.url.href, derivedRequestInit);\n};\nexport { lib as a, set as b, commonjsGlobal as c, cookie as d, delay as e, fetch as f, json as g, jsonParse as j, lib$1 as l, parse_1 as p, status as s };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}