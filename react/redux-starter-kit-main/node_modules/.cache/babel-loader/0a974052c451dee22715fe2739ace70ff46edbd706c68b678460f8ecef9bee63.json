{"ast":null,"code":"import { j as jsonParse, g as json } from './fetch-deps.js';\n\n/**\r\n * Determines if the given value is an object.\r\n */\nfunction isObject(value) {\n  return value != null && typeof value === 'object' && !Array.isArray(value);\n}\n\n/**\r\n * Deeply merges two given objects with the right one\r\n * having a priority during property assignment.\r\n */\nfunction mergeRight(left, right) {\n  return Object.entries(right).reduce((result, _ref) => {\n    let [key, rightValue] = _ref;\n    const leftValue = result[key];\n    if (Array.isArray(leftValue) && Array.isArray(rightValue)) {\n      result[key] = leftValue.concat(rightValue);\n      return result;\n    }\n    if (isObject(leftValue) && isObject(rightValue)) {\n      result[key] = mergeRight(leftValue, rightValue);\n      return result;\n    }\n    result[key] = rightValue;\n    return result;\n  }, Object.assign({}, left));\n}\n\n/**\r\n * Sets a given payload as a GraphQL response body.\r\n * @example\r\n * res(ctx.data({ user: { firstName: 'John' }}))\r\n * @see {@link https://mswjs.io/docs/api/context/data `ctx.data()`}\r\n */\nconst data = payload => {\n  return res => {\n    const prevBody = jsonParse(res.body) || {};\n    const nextBody = mergeRight(prevBody, {\n      data: payload\n    });\n    return json(nextBody)(res);\n  };\n};\n\n/**\r\n * Sets the GraphQL extensions on a given response.\r\n * @example\r\n * res(ctx.extensions({ tracing: { version: 1 }}))\r\n * @see {@link https://mswjs.io/docs/api/context/extensions `ctx.extensions()`}\r\n */\nconst extensions = payload => {\n  return res => {\n    const prevBody = jsonParse(res.body) || {};\n    const nextBody = mergeRight(prevBody, {\n      extensions: payload\n    });\n    return json(nextBody)(res);\n  };\n};\n\n/**\r\n * Sets a given list of GraphQL errors on the mocked response.\r\n * @example res(ctx.errors([{ message: 'Unauthorized' }]))\r\n * @see {@link https://mswjs.io/docs/api/context/errors}\r\n */\nconst errors = errorsList => {\n  return res => {\n    if (errorsList == null) {\n      return res;\n    }\n    const prevBody = jsonParse(res.body) || {};\n    const nextBody = mergeRight(prevBody, {\n      errors: errorsList\n    });\n    return json(nextBody)(res);\n  };\n};\nexport { errors as a, data as d, extensions as e, mergeRight as m };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}