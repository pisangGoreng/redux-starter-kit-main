{"ast":null,"code":"\"use strict\";\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n};\nvar __spreadArray = this && this.__spreadArray || function (to, from) {\n  for (var i = 0, il = from.length, j = to.length; i < il; i++, j++) to[j] = from[i];\n  return to;\n};\nexports.__esModule = true;\nexports.sync = void 0;\nvar glossary_1 = require(\"../glossary\");\nvar Database_1 = require(\"../db/Database\");\nvar inheritInternalProperties_1 = require(\"../utils/inheritInternalProperties\");\nfunction removeListeners(event, db) {\n  var listeners = db.events.listeners(event);\n  listeners.forEach(function (listener) {\n    db.events.removeListener(event, listener);\n  });\n  return function () {\n    listeners.forEach(function (listener) {\n      db.events.addListener(event, listener);\n    });\n  };\n}\n/**\n * Sets the serialized internal properties as symbols\n * on the given entity.\n * @note `Symbol` properties are stripped off when sending\n * an object over an event emitter.\n */\nfunction deserializeEntity(entity) {\n  var _a;\n  var _b = entity,\n    _c = Database_1.SERIALIZED_INTERNAL_PROPERTIES_KEY,\n    internalProperties = _b[_c],\n    publicProperties = __rest(_b, [typeof _c === \"symbol\" ? _c : _c + \"\"]);\n  inheritInternalProperties_1.inheritInternalProperties(publicProperties, (_a = {}, _a[glossary_1.ENTITY_TYPE] = internalProperties.entityType, _a[glossary_1.PRIMARY_KEY] = internalProperties.primaryKey, _a));\n  return publicProperties;\n}\n/**\n * Synchronizes database operations across multiple clients.\n */\nfunction sync(db) {\n  var IS_BROWSER = typeof window !== 'undefined';\n  var SUPPORTS_BROADCAST_CHANNEL = typeof BroadcastChannel !== 'undefined';\n  if (!IS_BROWSER || !SUPPORTS_BROADCAST_CHANNEL) {\n    return;\n  }\n  var channel = new BroadcastChannel('mswjs/data/sync');\n  channel.addEventListener('message', function (event) {\n    var _a = __read(event.data.payload, 1),\n      sourceId = _a[0];\n    // Ignore messages originating from unrelated databases.\n    // Useful in case of multiple databases on the same page.\n    if (db.id !== sourceId) {\n      return;\n    }\n    // Remove database event listener for the signaled operation\n    // to prevent an infinite loop when applying this operation.\n    var restoreListeners = removeListeners(event.data.operationType, db);\n    // Apply the database operation signaled from another client\n    // to the current database instance.\n    switch (event.data.operationType) {\n      case 'create':\n        {\n          var _b = __read(event.data.payload[1], 3),\n            modelName = _b[0],\n            entity = _b[1],\n            customPrimaryKey = _b[2];\n          db.create(modelName, deserializeEntity(entity), customPrimaryKey);\n          break;\n        }\n      case 'update':\n        {\n          var _c = __read(event.data.payload[1], 3),\n            modelName = _c[0],\n            prevEntity = _c[1],\n            nextEntity = _c[2];\n          db.update(modelName, deserializeEntity(prevEntity), deserializeEntity(nextEntity));\n          break;\n        }\n      default:\n        {\n          db[event.data.operationType].apply(db, __spreadArray([], __read(event.data.payload[1])));\n        }\n    }\n    // Re-attach database event listeners.\n    restoreListeners();\n  });\n  // Broadcast the emitted event from this client\n  // to all the other connected clients.\n  function broadcastDatabaseEvent(operationType) {\n    return function () {\n      var payload = [];\n      for (var _i = 0; _i < arguments.length; _i++) {\n        payload[_i] = arguments[_i];\n      }\n      channel.postMessage({\n        operationType: operationType,\n        payload: payload\n      });\n    };\n  }\n  db.events.on('create', broadcastDatabaseEvent('create'));\n  db.events.on('update', broadcastDatabaseEvent('update'));\n  db.events.on('delete', broadcastDatabaseEvent('delete'));\n}\nexports.sync = sync;","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}