{"ast":null,"code":"import { createSlice, nanoid } from '@reduxjs/toolkit';\nimport { sub } from 'date-fns';\nconst initialState = [{\n  id: '1',\n  title: 'first post',\n  content: 'bitcount to the moon',\n  date: sub(new Date(), {})\n}, {\n  id: '2',\n  title: 'second post',\n  content: 'bitcount sdfsdfsf'\n}];\nconst postsSlice = createSlice({\n  name: 'posts',\n  initialState,\n  reducers: {\n    postAdded: {\n      reducer: (state, action) => {\n        state.push(action.payload);\n      },\n      prepare(title, content, userId) {\n        return {\n          payload: {\n            id: nanoid,\n            date: new Date().toISOString(),\n            user: userId,\n            title,\n            content\n          }\n        };\n      }\n    },\n    postUpdated: (state, action) => {\n      const {\n        id,\n        title,\n        content\n      } = action.payload;\n      const existingPost = state.find(post => post.id === id);\n      if (existingPost) {\n        existingPost.title = title;\n        existingPost.content = content;\n      }\n    }\n  }\n});\nexport const {\n  postAdded,\n  postUpdated\n} = postsSlice.actions;\nexport default postsSlice.reducer;","map":{"version":3,"names":["createSlice","nanoid","sub","initialState","id","title","content","date","Date","postsSlice","name","reducers","postAdded","reducer","state","action","push","payload","prepare","userId","toISOString","user","postUpdated","existingPost","find","post","actions"],"sources":["/Users/endysantoso/Desktop/project/react/redux-starter-kit-main/src/features/posts/postsSlice.js"],"sourcesContent":["import { createSlice, nanoid } from '@reduxjs/toolkit'\nimport { sub } from 'date-fns'\n\nconst initialState = [\n  {\n    id: '1',\n    title: 'first post',\n    content: 'bitcount to the moon',\n    date: sub(new Date(), {}),\n  },\n  { id: '2', title: 'second post', content: 'bitcount sdfsdfsf' },\n]\n\nconst postsSlice = createSlice({\n  name: 'posts',\n  initialState,\n  reducers: {\n    postAdded: {\n      reducer: (state, action) => {\n        state.push(action.payload)\n      },\n      prepare(title, content, userId) {\n        return {\n          payload: {\n            id: nanoid,\n            date: new Date().toISOString(),\n            user: userId,\n            title,\n            content,\n          },\n        }\n      },\n    },\n    postUpdated: (state, action) => {\n      const { id, title, content } = action.payload\n      const existingPost = state.find((post) => post.id === id)\n      if (existingPost) {\n        existingPost.title = title\n        existingPost.content = content\n      }\n    },\n  },\n})\n\nexport const { postAdded, postUpdated } = postsSlice.actions\n\nexport default postsSlice.reducer\n"],"mappings":"AAAA,SAASA,WAAW,EAAEC,MAAM,QAAQ,kBAAkB;AACtD,SAASC,GAAG,QAAQ,UAAU;AAE9B,MAAMC,YAAY,GAAG,CACnB;EACEC,EAAE,EAAE,GAAG;EACPC,KAAK,EAAE,YAAY;EACnBC,OAAO,EAAE,sBAAsB;EAC/BC,IAAI,EAAEL,GAAG,CAAC,IAAIM,IAAI,EAAE,EAAE,CAAC,CAAC;AAC1B,CAAC,EACD;EAAEJ,EAAE,EAAE,GAAG;EAAEC,KAAK,EAAE,aAAa;EAAEC,OAAO,EAAE;AAAoB,CAAC,CAChE;AAED,MAAMG,UAAU,GAAGT,WAAW,CAAC;EAC7BU,IAAI,EAAE,OAAO;EACbP,YAAY;EACZQ,QAAQ,EAAE;IACRC,SAAS,EAAE;MACTC,OAAO,EAAEA,CAACC,KAAK,EAAEC,MAAM,KAAK;QAC1BD,KAAK,CAACE,IAAI,CAACD,MAAM,CAACE,OAAO,CAAC;MAC5B,CAAC;MACDC,OAAOA,CAACb,KAAK,EAAEC,OAAO,EAAEa,MAAM,EAAE;QAC9B,OAAO;UACLF,OAAO,EAAE;YACPb,EAAE,EAAEH,MAAM;YACVM,IAAI,EAAE,IAAIC,IAAI,EAAE,CAACY,WAAW,EAAE;YAC9BC,IAAI,EAAEF,MAAM;YACZd,KAAK;YACLC;UACF;QACF,CAAC;MACH;IACF,CAAC;IACDgB,WAAW,EAAEA,CAACR,KAAK,EAAEC,MAAM,KAAK;MAC9B,MAAM;QAAEX,EAAE;QAAEC,KAAK;QAAEC;MAAQ,CAAC,GAAGS,MAAM,CAACE,OAAO;MAC7C,MAAMM,YAAY,GAAGT,KAAK,CAACU,IAAI,CAAEC,IAAI,IAAKA,IAAI,CAACrB,EAAE,KAAKA,EAAE,CAAC;MACzD,IAAImB,YAAY,EAAE;QAChBA,YAAY,CAAClB,KAAK,GAAGA,KAAK;QAC1BkB,YAAY,CAACjB,OAAO,GAAGA,OAAO;MAChC;IACF;EACF;AACF,CAAC,CAAC;AAEF,OAAO,MAAM;EAAEM,SAAS;EAAEU;AAAY,CAAC,GAAGb,UAAU,CAACiB,OAAO;AAE5D,eAAejB,UAAU,CAACI,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}