{"ast":null,"code":"\"use strict\";\n\nvar __values = this && this.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n    m = s && o[s],\n    i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n};\nvar __spreadArray = this && this.__spreadArray || function (to, from) {\n  for (var i = 0, il = from.length, j = to.length; i < il; i++, j++) to[j] = from[i];\n  return to;\n};\nexports.__esModule = true;\nexports.parseModelDefinition = void 0;\nvar debug_1 = require(\"debug\");\nvar outvariant_1 = require(\"outvariant\");\nvar primaryKey_1 = require(\"../primaryKey\");\nvar isObject_1 = require(\"../utils/isObject\");\nvar Relation_1 = require(\"../relations/Relation\");\nvar nullable_1 = require(\"../nullable\");\nvar log = debug_1.debug('parseModelDefinition');\n/**\n * Recursively parses a given model definition into properties and relations.\n */\nfunction deepParseModelDefinition(dictionary, modelName, definition, parentPath, result) {\n  var e_1, _a;\n  if (result === void 0) {\n    result = {\n      primaryKey: undefined,\n      properties: [],\n      relations: []\n    };\n  }\n  if (parentPath) {\n    log('parsing a nested model definition for \"%s\" property at \"%s\"', parentPath, modelName, definition);\n  }\n  try {\n    for (var _b = __values(Object.entries(definition)), _c = _b.next(); !_c.done; _c = _b.next()) {\n      var _d = __read(_c.value, 2),\n        propertyName = _d[0],\n        value = _d[1];\n      var propertyPath = parentPath ? __spreadArray(__spreadArray([], __read(parentPath)), [propertyName]) : [propertyName];\n      // Primary key.\n      if (value instanceof primaryKey_1.PrimaryKey) {\n        outvariant_1.invariant(!result.primaryKey, 'Failed to parse a model definition for \"%s\": cannot have both properties \"%s\" and \"%s\" as a primary key.', modelName, result.primaryKey, propertyName);\n        outvariant_1.invariant(!parentPath, 'Failed to parse a model definition for \"%s\" property of \"%s\": cannot have a primary key in a nested object.', parentPath === null || parentPath === void 0 ? void 0 : parentPath.join('.'), modelName);\n        result.primaryKey = propertyName;\n        result.properties.push([propertyName]);\n        continue;\n      }\n      if (value instanceof nullable_1.NullableProperty) {\n        // Add nullable properties to the same list as regular properties\n        result.properties.push(propertyPath);\n        continue;\n      }\n      // Relations.\n      if (value instanceof Relation_1.Relation) {\n        // Store the relations in a separate object.\n        result.relations.push({\n          propertyPath: propertyPath,\n          relation: value\n        });\n        continue;\n      }\n      // Nested objects.\n      if (isObject_1.isObject(value)) {\n        deepParseModelDefinition(dictionary, modelName, value, propertyPath, result);\n        continue;\n      }\n      // Regular properties.\n      result.properties.push(propertyPath);\n    }\n  } catch (e_1_1) {\n    e_1 = {\n      error: e_1_1\n    };\n  } finally {\n    try {\n      if (_c && !_c.done && (_a = _b[\"return\"])) _a.call(_b);\n    } finally {\n      if (e_1) throw e_1.error;\n    }\n  }\n  return result;\n}\nfunction parseModelDefinition(dictionary, modelName, definition) {\n  log('parsing model definition for \"%s\" entity', modelName, definition);\n  var result = deepParseModelDefinition(dictionary, modelName, definition);\n  outvariant_1.invariant(result.primaryKey, 'Failed to parse a model definition for \"%s\": model is missing a primary key. Did you forget to mark one of its properties using the \"primaryKey\" function?', modelName);\n  return result;\n}\nexports.parseModelDefinition = parseModelDefinition;","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}