{"ast":null,"code":"import { createSlice, nanoid, createAsyncThunk } from '@reduxjs/toolkit';\nimport { client } from '../../api/client';\nconst initialState = {\n  posts: [],\n  status: 'idle',\n  // loading, sucess, failed, idle\n  error: null\n};\nexport const fetchPosts = createAsyncThunk('posts/fetchPosts', async () => {\n  const response = await client.get('/fakeApi/posts');\n  return response.data;\n});\nexport const addNewPost = createAsyncThunk('posts/addNewPost', async () => {});\nconst postsSlice = createSlice({\n  name: 'posts',\n  initialState,\n  reducers: {\n    reactionAdded: (state, action) => {\n      const {\n        postId,\n        reaction\n      } = action.payload;\n      const existingPost = state.posts.find(post => post.id === postId);\n      if (existingPost) {\n        existingPost.reactions[reaction]++;\n      }\n    },\n    postAdded: {\n      reducer: (state, action) => {\n        state.posts.push(action.payload);\n      },\n      prepare(title, content, userId) {\n        return {\n          payload: {\n            id: nanoid,\n            date: new Date().toISOString(),\n            user: userId,\n            title,\n            content,\n            reactions: {\n              thumbsUp: 0,\n              hooray: 0,\n              raisingHands: 0,\n              heart: 0,\n              rocket: 0\n            }\n          }\n        };\n      }\n    },\n    postUpdated: (state, action) => {\n      const {\n        id,\n        title,\n        content\n      } = action.payload;\n      const existingPost = state.posts.find(post => post.id === id);\n      if (existingPost) {\n        existingPost.title = title;\n        existingPost.content = content;\n      }\n    }\n  },\n  extraReducers(builder) {\n    builder.addCase(fetchPosts.pending, state => {\n      state.status = 'loading';\n    }).addCase(fetchPosts.fulfilled, (state, action) => {\n      state.status = 'succeeded';\n      state.posts = state.posts.concat(action.payload);\n    }).addCase(fetchPosts.rejected, (state, action) => {\n      state.status = 'failed';\n      state.error = action.error.message;\n    });\n  }\n});\nexport const {\n  postAdded,\n  postUpdated,\n  reactionAdded\n} = postsSlice.actions;\n\n// * biasakan buat reusable selector functions.\n// * jadi kalau ada perubahan structur di initial state, cukup rubah selector di slice nya aja\nexport const selectAllPosts = state => state.posts.posts;\nexport const selectPostsById = (state, postId) => state.posts.posts.find(post => post.id === postId);\nexport default postsSlice.reducer;","map":{"version":3,"names":["createSlice","nanoid","createAsyncThunk","client","initialState","posts","status","error","fetchPosts","response","get","data","addNewPost","postsSlice","name","reducers","reactionAdded","state","action","postId","reaction","payload","existingPost","find","post","id","reactions","postAdded","reducer","push","prepare","title","content","userId","date","Date","toISOString","user","thumbsUp","hooray","raisingHands","heart","rocket","postUpdated","extraReducers","builder","addCase","pending","fulfilled","concat","rejected","message","actions","selectAllPosts","selectPostsById"],"sources":["/Users/endysantoso/Desktop/project/react/redux-starter-kit-main/src/features/posts/postsSlice.js"],"sourcesContent":["import { createSlice, nanoid, createAsyncThunk } from '@reduxjs/toolkit'\nimport { client } from '../../api/client'\n\nconst initialState = {\n  posts: [],\n  status: 'idle', // loading, sucess, failed, idle\n  error: null,\n}\n\nexport const fetchPosts = createAsyncThunk('posts/fetchPosts', async () => {\n  const response = await client.get('/fakeApi/posts')\n  return response.data\n})\n\nexport const addNewPost = createAsyncThunk('posts/addNewPost', async () => {})\n\nconst postsSlice = createSlice({\n  name: 'posts',\n  initialState,\n  reducers: {\n    reactionAdded: (state, action) => {\n      const { postId, reaction } = action.payload\n      const existingPost = state.posts.find((post) => post.id === postId)\n      if (existingPost) {\n        existingPost.reactions[reaction]++\n      }\n    },\n    postAdded: {\n      reducer: (state, action) => {\n        state.posts.push(action.payload)\n      },\n      prepare(title, content, userId) {\n        return {\n          payload: {\n            id: nanoid,\n            date: new Date().toISOString(),\n            user: userId,\n            title,\n            content,\n            reactions: {\n              thumbsUp: 0,\n              hooray: 0,\n              raisingHands: 0,\n              heart: 0,\n              rocket: 0,\n            },\n          },\n        }\n      },\n    },\n    postUpdated: (state, action) => {\n      const { id, title, content } = action.payload\n      const existingPost = state.posts.find((post) => post.id === id)\n      if (existingPost) {\n        existingPost.title = title\n        existingPost.content = content\n      }\n    },\n  },\n  extraReducers(builder) {\n    builder\n      .addCase(fetchPosts.pending, (state) => {\n        state.status = 'loading'\n      })\n      .addCase(fetchPosts.fulfilled, (state, action) => {\n        state.status = 'succeeded'\n        state.posts = state.posts.concat(action.payload)\n      })\n      .addCase(fetchPosts.rejected, (state, action) => {\n        state.status = 'failed'\n        state.error = action.error.message\n      })\n  },\n})\n\nexport const { postAdded, postUpdated, reactionAdded } = postsSlice.actions\n\n// * biasakan buat reusable selector functions.\n// * jadi kalau ada perubahan structur di initial state, cukup rubah selector di slice nya aja\nexport const selectAllPosts = (state) => state.posts.posts\n\nexport const selectPostsById = (state, postId) =>\n  state.posts.posts.find((post) => post.id === postId)\n\nexport default postsSlice.reducer\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}