{"ast":null,"code":"import { createSlice, nanoid } from '@reduxjs/toolkit';\nconst initialState = [{\n  id: '1',\n  title: 'first post',\n  content: 'bitcount to the moon'\n}, {\n  id: '2',\n  title: 'second post',\n  content: 'bitcount sdfsdfsf'\n}];\nconst postsSlice = createSlice({\n  name: 'posts',\n  initialState,\n  reducers: {\n    postAdded: {\n      reducer: (state, action) => {\n        state.push(action.payload);\n      },\n      prepare(title, content) {\n        return {\n          payload: {\n            id: nanoid,\n            user: userId,\n            title,\n            content\n          }\n        };\n      }\n    },\n    postUpdated: (state, action) => {\n      const {\n        id,\n        title,\n        content\n      } = action.payload;\n      const existingPost = state.find(post => post.id === id);\n      if (existingPost) {\n        existingPost.title = title;\n        existingPost.content = content;\n      }\n    }\n  }\n});\nexport const {\n  postAdded,\n  postUpdated\n} = postsSlice.actions;\nexport default postsSlice.reducer;","map":{"version":3,"names":["createSlice","nanoid","initialState","id","title","content","postsSlice","name","reducers","postAdded","reducer","state","action","push","payload","prepare","user","userId","postUpdated","existingPost","find","post","actions"],"sources":["/Users/endysantoso/Desktop/project/react/redux-starter-kit-main/src/features/posts/postsSlice.js"],"sourcesContent":["import { createSlice, nanoid } from '@reduxjs/toolkit'\n\nconst initialState = [\n  { id: '1', title: 'first post', content: 'bitcount to the moon' },\n  { id: '2', title: 'second post', content: 'bitcount sdfsdfsf' },\n]\n\nconst postsSlice = createSlice({\n  name: 'posts',\n  initialState,\n  reducers: {\n    postAdded: {\n      reducer: (state, action) => {\n        state.push(action.payload)\n      },\n      prepare(title, content) {\n        return {\n          payload: {\n            id: nanoid,\n            user: userId,\n            title,\n            content,\n          },\n        }\n      },\n    },\n    postUpdated: (state, action) => {\n      const { id, title, content } = action.payload\n      const existingPost = state.find((post) => post.id === id)\n      if (existingPost) {\n        existingPost.title = title\n        existingPost.content = content\n      }\n    },\n  },\n})\n\nexport const { postAdded, postUpdated } = postsSlice.actions\n\nexport default postsSlice.reducer\n"],"mappings":"AAAA,SAASA,WAAW,EAAEC,MAAM,QAAQ,kBAAkB;AAEtD,MAAMC,YAAY,GAAG,CACnB;EAAEC,EAAE,EAAE,GAAG;EAAEC,KAAK,EAAE,YAAY;EAAEC,OAAO,EAAE;AAAuB,CAAC,EACjE;EAAEF,EAAE,EAAE,GAAG;EAAEC,KAAK,EAAE,aAAa;EAAEC,OAAO,EAAE;AAAoB,CAAC,CAChE;AAED,MAAMC,UAAU,GAAGN,WAAW,CAAC;EAC7BO,IAAI,EAAE,OAAO;EACbL,YAAY;EACZM,QAAQ,EAAE;IACRC,SAAS,EAAE;MACTC,OAAO,EAAEA,CAACC,KAAK,EAAEC,MAAM,KAAK;QAC1BD,KAAK,CAACE,IAAI,CAACD,MAAM,CAACE,OAAO,CAAC;MAC5B,CAAC;MACDC,OAAOA,CAACX,KAAK,EAAEC,OAAO,EAAE;QACtB,OAAO;UACLS,OAAO,EAAE;YACPX,EAAE,EAAEF,MAAM;YACVe,IAAI,EAAEC,MAAM;YACZb,KAAK;YACLC;UACF;QACF,CAAC;MACH;IACF,CAAC;IACDa,WAAW,EAAEA,CAACP,KAAK,EAAEC,MAAM,KAAK;MAC9B,MAAM;QAAET,EAAE;QAAEC,KAAK;QAAEC;MAAQ,CAAC,GAAGO,MAAM,CAACE,OAAO;MAC7C,MAAMK,YAAY,GAAGR,KAAK,CAACS,IAAI,CAAEC,IAAI,IAAKA,IAAI,CAAClB,EAAE,KAAKA,EAAE,CAAC;MACzD,IAAIgB,YAAY,EAAE;QAChBA,YAAY,CAACf,KAAK,GAAGA,KAAK;QAC1Be,YAAY,CAACd,OAAO,GAAGA,OAAO;MAChC;IACF;EACF;AACF,CAAC,CAAC;AAEF,OAAO,MAAM;EAAEI,SAAS;EAAES;AAAY,CAAC,GAAGZ,UAAU,CAACgB,OAAO;AAE5D,eAAehB,UAAU,CAACI,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}