{"ast":null,"code":"import { createAsyncThunk, createSlice, createEntityAdapter } from '@reduxjs/toolkit';\nimport { client } from '../../api/client';\nexport const fetchNotifications = createAsyncThunk('notifications/fetchNotifications', async (_, _ref) => {\n  let {\n    getState\n  } = _ref;\n  const allNotifications = selectAllNotifications(getState());\n  const [latestNotification] = allNotifications;\n  const latestTimestamp = latestNotification ? latestNotification.date : '';\n  try {\n    const response = await client.get(`/fakeApi/notifications`);\n    console.log('ðŸš€ ~ file: notificationsSlice.js:14 ~ response:', response);\n    return response.data;\n  } catch (error) {\n    console.log('ðŸš€ ~ file: notificationsSlice.js:19 ~ error:', error);\n    throw error;\n  }\n});\nconst notificationsAdapter = createEntityAdapter({\n  sortComparer: (a, b) => b.date.localeCompare(a.date)\n});\nconst notificationsSlice = createSlice({\n  name: 'notifications',\n  initialState: notificationsAdapter.getInitialState(),\n  reducers: {\n    allNotificationsRead(state, action) {\n      object.values(state.entities).forEach(notification => {\n        notification.read = true;\n      });\n    }\n  },\n  extraReducers(builder) {\n    builder.addCase(fetchNotifications.fulfilled, (state, action) => {\n      state.push(...action.payload);\n      state.sort((a, b) => b.date.localeCompare(a.date));\n      state.forEach(notification => {\n        notification.isNew = !notification.read;\n      });\n    });\n  }\n});\nexport const {\n  allNotificationsRead\n} = notificationsSlice.actions;\nexport default notificationsSlice.reducer;\n\n// ! ini bisa dipakai di createAsyncThunk loh\nexport const selectAllNotifications = state => state.notifications;","map":{"version":3,"names":["createAsyncThunk","createSlice","createEntityAdapter","client","fetchNotifications","_","_ref","getState","allNotifications","selectAllNotifications","latestNotification","latestTimestamp","date","response","get","console","log","data","error","notificationsAdapter","sortComparer","a","b","localeCompare","notificationsSlice","name","initialState","getInitialState","reducers","allNotificationsRead","state","action","object","values","entities","forEach","notification","read","extraReducers","builder","addCase","fulfilled","push","payload","sort","isNew","actions","reducer","notifications"],"sources":["/Users/endysantoso/Desktop/project/react/redux-starter-kit-main/src/features/notifications/notificationsSlice.js"],"sourcesContent":["import {\n  createAsyncThunk,\n  createSlice,\n  createEntityAdapter,\n} from '@reduxjs/toolkit'\nimport { client } from '../../api/client'\n\nexport const fetchNotifications = createAsyncThunk(\n  'notifications/fetchNotifications',\n  async (_, { getState }) => {\n    const allNotifications = selectAllNotifications(getState())\n\n    const [latestNotification] = allNotifications\n    const latestTimestamp = latestNotification ? latestNotification.date : ''\n\n    try {\n      const response = await client.get(`/fakeApi/notifications`)\n      console.log('ðŸš€ ~ file: notificationsSlice.js:14 ~ response:', response)\n      return response.data\n    } catch (error) {\n      console.log('ðŸš€ ~ file: notificationsSlice.js:19 ~ error:', error)\n      throw error\n    }\n  }\n)\n\nconst notificationsAdapter = createEntityAdapter({\n  sortComparer: (a, b) => b.date.localeCompare(a.date),\n})\n\nconst notificationsSlice = createSlice({\n  name: 'notifications',\n  initialState: notificationsAdapter.getInitialState(),\n  reducers: {\n    allNotificationsRead(state, action) {\n      object.values(state.entities).forEach((notification) => {\n        notification.read = true\n      })\n    },\n  },\n  extraReducers(builder) {\n    builder.addCase(fetchNotifications.fulfilled, (state, action) => {\n      state.push(...action.payload)\n      state.sort((a, b) => b.date.localeCompare(a.date))\n      state.forEach((notification) => {\n        notification.isNew = !notification.read\n      })\n    })\n  },\n})\n\nexport const { allNotificationsRead } = notificationsSlice.actions\n\nexport default notificationsSlice.reducer\n\n// ! ini bisa dipakai di createAsyncThunk loh\nexport const selectAllNotifications = (state) => state.notifications\n"],"mappings":"AAAA,SACEA,gBAAgB,EAChBC,WAAW,EACXC,mBAAmB,QACd,kBAAkB;AACzB,SAASC,MAAM,QAAQ,kBAAkB;AAEzC,OAAO,MAAMC,kBAAkB,GAAGJ,gBAAgB,CAChD,kCAAkC,EAClC,OAAOK,CAAC,EAAAC,IAAA,KAAmB;EAAA,IAAjB;IAAEC;EAAS,CAAC,GAAAD,IAAA;EACpB,MAAME,gBAAgB,GAAGC,sBAAsB,CAACF,QAAQ,EAAE,CAAC;EAE3D,MAAM,CAACG,kBAAkB,CAAC,GAAGF,gBAAgB;EAC7C,MAAMG,eAAe,GAAGD,kBAAkB,GAAGA,kBAAkB,CAACE,IAAI,GAAG,EAAE;EAEzE,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMV,MAAM,CAACW,GAAG,CAAE,wBAAuB,CAAC;IAC3DC,OAAO,CAACC,GAAG,CAAC,iDAAiD,EAAEH,QAAQ,CAAC;IACxE,OAAOA,QAAQ,CAACI,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdH,OAAO,CAACC,GAAG,CAAC,8CAA8C,EAAEE,KAAK,CAAC;IAClE,MAAMA,KAAK;EACb;AACF,CAAC,CACF;AAED,MAAMC,oBAAoB,GAAGjB,mBAAmB,CAAC;EAC/CkB,YAAY,EAAEA,CAACC,CAAC,EAAEC,CAAC,KAAKA,CAAC,CAACV,IAAI,CAACW,aAAa,CAACF,CAAC,CAACT,IAAI;AACrD,CAAC,CAAC;AAEF,MAAMY,kBAAkB,GAAGvB,WAAW,CAAC;EACrCwB,IAAI,EAAE,eAAe;EACrBC,YAAY,EAAEP,oBAAoB,CAACQ,eAAe,EAAE;EACpDC,QAAQ,EAAE;IACRC,oBAAoBA,CAACC,KAAK,EAAEC,MAAM,EAAE;MAClCC,MAAM,CAACC,MAAM,CAACH,KAAK,CAACI,QAAQ,CAAC,CAACC,OAAO,CAAEC,YAAY,IAAK;QACtDA,YAAY,CAACC,IAAI,GAAG,IAAI;MAC1B,CAAC,CAAC;IACJ;EACF,CAAC;EACDC,aAAaA,CAACC,OAAO,EAAE;IACrBA,OAAO,CAACC,OAAO,CAACpC,kBAAkB,CAACqC,SAAS,EAAE,CAACX,KAAK,EAAEC,MAAM,KAAK;MAC/DD,KAAK,CAACY,IAAI,CAAC,GAAGX,MAAM,CAACY,OAAO,CAAC;MAC7Bb,KAAK,CAACc,IAAI,CAAC,CAACvB,CAAC,EAAEC,CAAC,KAAKA,CAAC,CAACV,IAAI,CAACW,aAAa,CAACF,CAAC,CAACT,IAAI,CAAC,CAAC;MAClDkB,KAAK,CAACK,OAAO,CAAEC,YAAY,IAAK;QAC9BA,YAAY,CAACS,KAAK,GAAG,CAACT,YAAY,CAACC,IAAI;MACzC,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ;AACF,CAAC,CAAC;AAEF,OAAO,MAAM;EAAER;AAAqB,CAAC,GAAGL,kBAAkB,CAACsB,OAAO;AAElE,eAAetB,kBAAkB,CAACuB,OAAO;;AAEzC;AACA,OAAO,MAAMtC,sBAAsB,GAAIqB,KAAK,IAAKA,KAAK,CAACkB,aAAa"},"metadata":{},"sourceType":"module","externalDependencies":[]}