{"ast":null,"code":"\"use strict\";\n\nvar __values = this && this.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n    m = s && o[s],\n    i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nexports.__esModule = true;\nexports.defineRelationalProperties = void 0;\nvar debug_1 = require(\"debug\");\nvar get_1 = __importDefault(require(\"lodash/get\"));\nvar outvariant_1 = require(\"outvariant\");\nvar glossary_1 = require(\"../glossary\");\nvar log = debug_1.debug('defineRelationalProperties');\nfunction defineRelationalProperties(entity, initialValues, relations, dictionary, db) {\n  var e_1, _a;\n  log('defining relational properties...', {\n    entity: entity,\n    initialValues: initialValues,\n    relations: relations\n  });\n  try {\n    for (var relations_1 = __values(relations), relations_1_1 = relations_1.next(); !relations_1_1.done; relations_1_1 = relations_1.next()) {\n      var _b = relations_1_1.value,\n        propertyPath = _b.propertyPath,\n        relation = _b.relation;\n      outvariant_1.invariant(dictionary[relation.target.modelName], 'Failed to define a \"%s\" relational property to \"%s\" on \"%s\": cannot find a model by the name \"%s\".', relation.kind, propertyPath.join('.'), entity[glossary_1.ENTITY_TYPE], relation.target.modelName);\n      var references = get_1[\"default\"](initialValues, propertyPath);\n      outvariant_1.invariant(references !== null || relation.attributes.nullable, 'Failed to define a \"%s\" relationship to \"%s\" at \"%s.%s\" (%s: \"%s\"): cannot set a non-nullable relationship to null.', relation.kind, relation.target.modelName, entity[glossary_1.ENTITY_TYPE], propertyPath.join('.'), entity[glossary_1.PRIMARY_KEY], entity[entity[glossary_1.PRIMARY_KEY]]);\n      // invariant(\n      //   references !== null || relation.attributes.nullable,\n      //   'Failed to define a \"%s\" relational property to \"%s\" on \"%s\": a non-nullable relation cannot be instantiated with null. Use the \"nullable\" function when defining this relation to support nullable value.',\n      //   relation.kind,\n      //   propertyPath.join('.'),\n      //   entity[ENTITY_TYPE],\n      // )\n      log(\"setting relational property \\\"\" + entity.__type + \".\" + propertyPath.join('.') + \"\\\" with references: %j\", relation, references);\n      relation.apply(entity, propertyPath, dictionary, db);\n      if (references) {\n        relation.resolveWith(entity, references);\n      } else if (relation.attributes.nullable) {\n        relation.resolveWith(entity, null);\n      }\n    }\n  } catch (e_1_1) {\n    e_1 = {\n      error: e_1_1\n    };\n  } finally {\n    try {\n      if (relations_1_1 && !relations_1_1.done && (_a = relations_1[\"return\"])) _a.call(relations_1);\n    } finally {\n      if (e_1) throw e_1.error;\n    }\n  }\n}\nexports.defineRelationalProperties = defineRelationalProperties;","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}